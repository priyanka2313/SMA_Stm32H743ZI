
DAQ_TEST_step.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002778  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002a10  08002a10  00012a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002a20  08002a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002a24  08002a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00001dbc  20000000  08002a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000088  20001dbc  080047e4  00021dbc  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001e44  080047e4  00021e44  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00021dbc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017327  00000000  00000000  00021dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000261a  00000000  00000000  00039111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d08  00000000  00000000  0003b730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c30  00000000  00000000  0003c438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000358ca  00000000  00000000  0003d068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e6b5  00000000  00000000  00072932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00159d7b  00000000  00000000  00080fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001dad62  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000368c  00000000  00000000  001dadb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20001dbc 	.word	0x20001dbc
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080029f8 	.word	0x080029f8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20001dc0 	.word	0x20001dc0
 80002d4:	080029f8 	.word	0x080029f8

080002d8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80002e0:	2100      	movs	r1, #0
 80002e2:	481e      	ldr	r0, [pc, #120]	; (800035c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80002e4:	f000 fccd 	bl	8000c82 <HAL_DAC_Start>
//		values[i]=3346;
//	if(i>=96)
//		values[i]=120;

	//siner2[i]=j*siner2[i];
	if(i<1130)
 80002e8:	4b1d      	ldr	r3, [pc, #116]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f240 4269 	movw	r2, #1129	; 0x469
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d80e      	bhi.n	8000312 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, siner2[i]);
 80002f4:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a1a      	ldr	r2, [pc, #104]	; (8000364 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80002fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fe:	2200      	movs	r2, #0
 8000300:	2100      	movs	r1, #0
 8000302:	4816      	ldr	r0, [pc, #88]	; (800035c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000304:	f000 fd69 	bl	8000dda <HAL_DAC_SetValue>
		i++;
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	3301      	adds	r3, #1
 800030e:	4a14      	ldr	r2, [pc, #80]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000310:	6013      	str	r3, [r2, #0]
	}
	if(i>=1130)
 8000312:	4b13      	ldr	r3, [pc, #76]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f240 4269 	movw	r2, #1129	; 0x469
 800031a:	4293      	cmp	r3, r2
 800031c:	d912      	bls.n	8000344 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		i=1130;
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000320:	f240 426a 	movw	r2, #1130	; 0x46a
 8000324:	601a      	str	r2, [r3, #0]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sinev[j]);
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a10      	ldr	r2, [pc, #64]	; (800036c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800032c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000330:	2200      	movs	r2, #0
 8000332:	2100      	movs	r1, #0
 8000334:	4809      	ldr	r0, [pc, #36]	; (800035c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000336:	f000 fd50 	bl	8000dda <HAL_DAC_SetValue>
		j++;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	3301      	adds	r3, #1
 8000340:	4a09      	ldr	r2, [pc, #36]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000342:	6013      	str	r3, [r2, #0]

	}

	if(j>=512)
 8000344:	4b08      	ldr	r3, [pc, #32]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800034c:	d302      	bcc.n	8000354 <HAL_TIM_PeriodElapsedCallback+0x7c>
		{j=0;
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
		//i=0;
		}

}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20001de0 	.word	0x20001de0
 8000360:	20001dd8 	.word	0x20001dd8
 8000364:	20000c00 	.word	0x20000c00
 8000368:	20001ddc 	.word	0x20001ddc
 800036c:	20000000 	.word	0x20000000

08000370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000374:	f000 fa92 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000378:	f000 f80c 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037c:	f000 f8f0 	bl	8000560 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000380:	f000 f886 	bl	8000490 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000384:	f000 f8b6 	bl	80004f4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8000388:	4801      	ldr	r0, [pc, #4]	; (8000390 <main+0x20>)
 800038a:	f002 f811 	bl	80023b0 <HAL_TIM_Base_Start_IT>
  //sine wave freq 100. to cgange freq change the samples
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800038e:	e7fe      	b.n	800038e <main+0x1e>
 8000390:	20001df4 	.word	0x20001df4

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b09c      	sub	sp, #112	; 0x70
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800039e:	224c      	movs	r2, #76	; 0x4c
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 fb20 	bl	80029e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2220      	movs	r2, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f002 fb1a 	bl	80029e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003b4:	2002      	movs	r0, #2
 80003b6:	f001 f829 	bl	800140c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003ba:	2300      	movs	r3, #0
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	4b32      	ldr	r3, [pc, #200]	; (8000488 <SystemClock_Config+0xf4>)
 80003c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003c2:	4a31      	ldr	r2, [pc, #196]	; (8000488 <SystemClock_Config+0xf4>)
 80003c4:	f023 0301 	bic.w	r3, r3, #1
 80003c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003ca:	4b2f      	ldr	r3, [pc, #188]	; (8000488 <SystemClock_Config+0xf4>)
 80003cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	4b2d      	ldr	r3, [pc, #180]	; (800048c <SystemClock_Config+0xf8>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003dc:	4a2b      	ldr	r2, [pc, #172]	; (800048c <SystemClock_Config+0xf8>)
 80003de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b29      	ldr	r3, [pc, #164]	; (800048c <SystemClock_Config+0xf8>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003f0:	bf00      	nop
 80003f2:	4b26      	ldr	r3, [pc, #152]	; (800048c <SystemClock_Config+0xf8>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003fe:	d1f8      	bne.n	80003f2 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000400:	2302      	movs	r3, #2
 8000402:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000404:	2301      	movs	r3, #1
 8000406:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000408:	2340      	movs	r3, #64	; 0x40
 800040a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040c:	2302      	movs	r3, #2
 800040e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000410:	2300      	movs	r3, #0
 8000412:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000414:	2304      	movs	r3, #4
 8000416:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000418:	230c      	movs	r3, #12
 800041a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800041c:	2302      	movs	r3, #2
 800041e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000420:	2304      	movs	r3, #4
 8000422:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000424:	2302      	movs	r3, #2
 8000426:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000428:	230c      	movs	r3, #12
 800042a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800042c:	2300      	movs	r3, #0
 800042e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000434:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800043a:	4618      	mov	r0, r3
 800043c:	f001 f820 	bl	8001480 <HAL_RCC_OscConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000446:	f000 f8a5 	bl	8000594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044a:	233f      	movs	r3, #63	; 0x3f
 800044c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044e:	2303      	movs	r3, #3
 8000450:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2102      	movs	r1, #2
 800046e:	4618      	mov	r0, r3
 8000470:	f001 fc16 	bl	8001ca0 <HAL_RCC_ClockConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800047a:	f000 f88b 	bl	8000594 <Error_Handler>
  }
}
 800047e:	bf00      	nop
 8000480:	3770      	adds	r7, #112	; 0x70
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	58000400 	.word	0x58000400
 800048c:	58024800 	.word	0x58024800

08000490 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b08a      	sub	sp, #40	; 0x28
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2224      	movs	r2, #36	; 0x24
 800049a:	2100      	movs	r1, #0
 800049c:	4618      	mov	r0, r3
 800049e:	f002 faa3 	bl	80029e8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <MX_DAC1_Init+0x5c>)
 80004a4:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <MX_DAC1_Init+0x60>)
 80004a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004a8:	4810      	ldr	r0, [pc, #64]	; (80004ec <MX_DAC1_Init+0x5c>)
 80004aa:	f000 fbc8 	bl	8000c3e <HAL_DAC_Init>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80004b4:	f000 f86e 	bl	8000594 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80004bc:	2316      	movs	r3, #22
 80004be:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80004c4:	2301      	movs	r3, #1
 80004c6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	4619      	mov	r1, r3
 80004d2:	4806      	ldr	r0, [pc, #24]	; (80004ec <MX_DAC1_Init+0x5c>)
 80004d4:	f000 fcb0 	bl	8000e38 <HAL_DAC_ConfigChannel>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80004de:	f000 f859 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	3728      	adds	r7, #40	; 0x28
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20001de0 	.word	0x20001de0
 80004f0:	40007400 	.word	0x40007400

080004f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_TIM6_Init+0x64>)
 8000506:	4a15      	ldr	r2, [pc, #84]	; (800055c <MX_TIM6_Init+0x68>)
 8000508:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <MX_TIM6_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_TIM6_Init+0x64>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4095;
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <MX_TIM6_Init+0x64>)
 8000518:	f640 72ff 	movw	r2, #4095	; 0xfff
 800051c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_TIM6_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <MX_TIM6_Init+0x64>)
 8000526:	f001 feeb 	bl	8002300 <HAL_TIM_Base_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000530:	f000 f830 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000534:	2320      	movs	r3, #32
 8000536:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4619      	mov	r1, r3
 8000540:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_TIM6_Init+0x64>)
 8000542:	f002 f987 	bl	8002854 <HAL_TIMEx_MasterConfigSynchronization>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800054c:	f000 f822 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20001df4 	.word	0x20001df4
 800055c:	40001000 	.word	0x40001000

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <MX_GPIO_Init+0x30>)
 8000568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800056c:	4a08      	ldr	r2, [pc, #32]	; (8000590 <MX_GPIO_Init+0x30>)
 800056e:	f043 0301 	orr.w	r3, r3, #1
 8000572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_GPIO_Init+0x30>)
 8000578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	58024400 	.word	0x58024400

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	e7fe      	b.n	800059c <Error_Handler+0x8>
	...

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <HAL_MspInit+0x30>)
 80005a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <HAL_MspInit+0x30>)
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_MspInit+0x30>)
 80005b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	58024400 	.word	0x58024400

080005d4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <HAL_DAC_MspInit+0x90>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d131      	bne.n	800065a <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <HAL_DAC_MspInit+0x94>)
 80005f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80005fc:	4a1a      	ldr	r2, [pc, #104]	; (8000668 <HAL_DAC_MspInit+0x94>)
 80005fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000602:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000606:	4b18      	ldr	r3, [pc, #96]	; (8000668 <HAL_DAC_MspInit+0x94>)
 8000608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800060c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000610:	613b      	str	r3, [r7, #16]
 8000612:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <HAL_DAC_MspInit+0x94>)
 8000616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061a:	4a13      	ldr	r2, [pc, #76]	; (8000668 <HAL_DAC_MspInit+0x94>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000624:	4b10      	ldr	r3, [pc, #64]	; (8000668 <HAL_DAC_MspInit+0x94>)
 8000626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000632:	2310      	movs	r3, #16
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000636:	2303      	movs	r3, #3
 8000638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <HAL_DAC_MspInit+0x98>)
 8000646:	f000 fd31 	bl	80010ac <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	2036      	movs	r0, #54	; 0x36
 8000650:	f000 fac1 	bl	8000bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000654:	2036      	movs	r0, #54	; 0x36
 8000656:	f000 fad8 	bl	8000c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800065a:	bf00      	nop
 800065c:	3728      	adds	r7, #40	; 0x28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40007400 	.word	0x40007400
 8000668:	58024400 	.word	0x58024400
 800066c:	58020000 	.word	0x58020000

08000670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <HAL_TIM_Base_MspInit+0x48>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d116      	bne.n	80006b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <HAL_TIM_Base_MspInit+0x4c>)
 8000684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000688:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <HAL_TIM_Base_MspInit+0x4c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <HAL_TIM_Base_MspInit+0x4c>)
 8000694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000698:	f003 0310 	and.w	r3, r3, #16
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2036      	movs	r0, #54	; 0x36
 80006a6:	f000 fa96 	bl	8000bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006aa:	2036      	movs	r0, #54	; 0x36
 80006ac:	f000 faad 	bl	8000c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40001000 	.word	0x40001000
 80006bc:	58024400 	.word	0x58024400

080006c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <NMI_Handler+0x4>

080006c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <HardFault_Handler+0x4>

080006cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <MemManage_Handler+0x4>

080006d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <BusFault_Handler+0x4>

080006d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <UsageFault_Handler+0x4>

080006de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070c:	f000 f938 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <TIM6_DAC_IRQHandler+0x14>)
 800071a:	f000 fb04 	bl	8000d26 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <TIM6_DAC_IRQHandler+0x18>)
 8000720:	f001 feb6 	bl	8002490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20001de0 	.word	0x20001de0
 800072c:	20001df4 	.word	0x20001df4

08000730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000734:	4b39      	ldr	r3, [pc, #228]	; (800081c <SystemInit+0xec>)
 8000736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073a:	4a38      	ldr	r2, [pc, #224]	; (800081c <SystemInit+0xec>)
 800073c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000744:	4b36      	ldr	r3, [pc, #216]	; (8000820 <SystemInit+0xf0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f003 030f 	and.w	r3, r3, #15
 800074c:	2b06      	cmp	r3, #6
 800074e:	d807      	bhi.n	8000760 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000750:	4b33      	ldr	r3, [pc, #204]	; (8000820 <SystemInit+0xf0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f023 030f 	bic.w	r3, r3, #15
 8000758:	4a31      	ldr	r2, [pc, #196]	; (8000820 <SystemInit+0xf0>)
 800075a:	f043 0307 	orr.w	r3, r3, #7
 800075e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000760:	4b30      	ldr	r3, [pc, #192]	; (8000824 <SystemInit+0xf4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a2f      	ldr	r2, [pc, #188]	; (8000824 <SystemInit+0xf4>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800076c:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <SystemInit+0xf4>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000772:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <SystemInit+0xf4>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	492b      	ldr	r1, [pc, #172]	; (8000824 <SystemInit+0xf4>)
 8000778:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <SystemInit+0xf8>)
 800077a:	4013      	ands	r3, r2
 800077c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <SystemInit+0xf0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	2b00      	cmp	r3, #0
 8000788:	d007      	beq.n	800079a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800078a:	4b25      	ldr	r3, [pc, #148]	; (8000820 <SystemInit+0xf0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f023 030f 	bic.w	r3, r3, #15
 8000792:	4a23      	ldr	r2, [pc, #140]	; (8000820 <SystemInit+0xf0>)
 8000794:	f043 0307 	orr.w	r3, r3, #7
 8000798:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800079a:	4b22      	ldr	r3, [pc, #136]	; (8000824 <SystemInit+0xf4>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <SystemInit+0xf4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <SystemInit+0xf4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <SystemInit+0xf4>)
 80007ae:	4a1f      	ldr	r2, [pc, #124]	; (800082c <SystemInit+0xfc>)
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <SystemInit+0xf4>)
 80007b4:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <SystemInit+0x100>)
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <SystemInit+0xf4>)
 80007ba:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <SystemInit+0x104>)
 80007bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <SystemInit+0xf4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <SystemInit+0xf4>)
 80007c6:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <SystemInit+0x104>)
 80007c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <SystemInit+0xf4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <SystemInit+0xf4>)
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <SystemInit+0x104>)
 80007d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <SystemInit+0xf4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <SystemInit+0xf4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <SystemInit+0xf4>)
 80007e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <SystemInit+0xf4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <SystemInit+0x108>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <SystemInit+0x10c>)
 80007f4:	4013      	ands	r3, r2
 80007f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007fa:	d202      	bcs.n	8000802 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <SystemInit+0x110>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <SystemInit+0x114>)
 8000804:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000808:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <SystemInit+0xec>)
 800080c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000810:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000ed00 	.word	0xe000ed00
 8000820:	52002000 	.word	0x52002000
 8000824:	58024400 	.word	0x58024400
 8000828:	eaf6ed7f 	.word	0xeaf6ed7f
 800082c:	02020200 	.word	0x02020200
 8000830:	01ff0000 	.word	0x01ff0000
 8000834:	01010280 	.word	0x01010280
 8000838:	5c001000 	.word	0x5c001000
 800083c:	ffff0000 	.word	0xffff0000
 8000840:	51008108 	.word	0x51008108
 8000844:	52004000 	.word	0x52004000

08000848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000880 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800084c:	f7ff ff70 	bl	8000730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	; (8000888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	; (8000894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000876:	f002 f893 	bl	80029a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800087a:	f7ff fd79 	bl	8000370 <main>
  bx  lr
 800087e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000880:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	20001dbc 	.word	0x20001dbc
  ldr r2, =_sidata
 800088c:	08002a28 	.word	0x08002a28
  ldr r2, =_sbss
 8000890:	20001dbc 	.word	0x20001dbc
  ldr r4, =_ebss
 8000894:	20001e44 	.word	0x20001e44

08000898 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC3_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a2:	2003      	movs	r0, #3
 80008a4:	f000 f98c 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008a8:	f001 fbb0 	bl	800200c <HAL_RCC_GetSysClockFreq>
 80008ac:	4602      	mov	r2, r0
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_Init+0x68>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	f003 030f 	and.w	r3, r3, #15
 80008b8:	4913      	ldr	r1, [pc, #76]	; (8000908 <HAL_Init+0x6c>)
 80008ba:	5ccb      	ldrb	r3, [r1, r3]
 80008bc:	f003 031f 	and.w	r3, r3, #31
 80008c0:	fa22 f303 	lsr.w	r3, r2, r3
 80008c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_Init+0x68>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <HAL_Init+0x6c>)
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	f003 031f 	and.w	r3, r3, #31
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	fa22 f303 	lsr.w	r3, r2, r3
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <HAL_Init+0x70>)
 80008de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008e0:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <HAL_Init+0x74>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 f814 	bl	8000914 <HAL_InitTick>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e002      	b.n	80008fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008f6:	f7ff fe53 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	58024400 	.word	0x58024400
 8000908:	08002a10 	.word	0x08002a10
 800090c:	20001db0 	.word	0x20001db0
 8000910:	20001dac 	.word	0x20001dac

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_InitTick+0x60>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d101      	bne.n	8000928 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	e021      	b.n	800096c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <HAL_InitTick+0x64>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_InitTick+0x60>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	fbb3 f3f1 	udiv	r3, r3, r1
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f971 	bl	8000c26 <HAL_SYSTICK_Config>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e00e      	b.n	800096c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d80a      	bhi.n	800096a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f000 f93b 	bl	8000bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <HAL_InitTick+0x68>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20001db8 	.word	0x20001db8
 8000978:	20001dac 	.word	0x20001dac
 800097c:	20001db4 	.word	0x20001db4

08000980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_IncTick+0x20>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_IncTick+0x24>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_IncTick+0x24>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20001db8 	.word	0x20001db8
 80009a4:	20001e40 	.word	0x20001e40

080009a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <HAL_GetTick+0x14>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20001e40 	.word	0x20001e40

080009c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c8:	f7ff ffee 	bl	80009a8 <HAL_GetTick>
 80009cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d8:	d005      	beq.n	80009e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_Delay+0x44>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009e6:	bf00      	nop
 80009e8:	f7ff ffde 	bl	80009a8 <HAL_GetTick>
 80009ec:	4602      	mov	r2, r0
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d8f7      	bhi.n	80009e8 <HAL_Delay+0x28>
  {
  }
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20001db8 	.word	0x20001db8

08000a08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <HAL_GetREVID+0x14>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	0c1b      	lsrs	r3, r3, #16
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	5c001000 	.word	0x5c001000

08000a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <__NVIC_SetPriorityGrouping+0x40>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <__NVIC_SetPriorityGrouping+0x40>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00
 8000a64:	05fa0000 	.word	0x05fa0000

08000a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <__NVIC_GetPriorityGrouping+0x18>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	f003 0307 	and.w	r3, r3, #7
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	db0b      	blt.n	8000aae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	f003 021f 	and.w	r2, r3, #31
 8000a9c:	4907      	ldr	r1, [pc, #28]	; (8000abc <__NVIC_EnableIRQ+0x38>)
 8000a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b8c:	d301      	bcc.n	8000b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00f      	b.n	8000bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <SysTick_Config+0x40>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f7ff ff8e 	bl	8000ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x40>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ff29 	bl	8000a20 <__NVIC_SetPriorityGrouping>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be4:	f7ff ff40 	bl	8000a68 <__NVIC_GetPriorityGrouping>
 8000be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	6978      	ldr	r0, [r7, #20]
 8000bf0:	f7ff ff90 	bl	8000b14 <NVIC_EncodePriority>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff5f 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff33 	bl	8000a84 <__NVIC_EnableIRQ>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffa4 	bl	8000b7c <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e014      	b.n	8000c7a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	791b      	ldrb	r3, [r3, #4]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d105      	bne.n	8000c66 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff fcb7 	bl	80005d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2202      	movs	r2, #2
 8000c6a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2201      	movs	r2, #1
 8000c76:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	795b      	ldrb	r3, [r3, #5]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d101      	bne.n	8000c98 <HAL_DAC_Start+0x16>
 8000c94:	2302      	movs	r3, #2
 8000c96:	e040      	b.n	8000d1a <HAL_DAC_Start+0x98>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6819      	ldr	r1, [r3, #0]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	f003 0310 	and.w	r3, r3, #16
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10f      	bne.n	8000ce2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d11d      	bne.n	8000d0c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f042 0201 	orr.w	r2, r2, #1
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	e014      	b.n	8000d0c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d107      	bne.n	8000d0c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f042 0202 	orr.w	r2, r2, #2
 8000d0a:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d3c:	d120      	bne.n	8000d80 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d4c:	d118      	bne.n	8000d80 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2204      	movs	r2, #4
 8000d52:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	f043 0201 	orr.w	r2, r3, #1
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d78:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 f852 	bl	8000e24 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d8e:	d120      	bne.n	8000dd2 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d9e:	d118      	bne.n	8000dd2 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2204      	movs	r2, #4
 8000da4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	f043 0202 	orr.w	r2, r3, #2
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000dba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000dca:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 f963 	bl	8001098 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b087      	sub	sp, #28
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d105      	bne.n	8000e04 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3308      	adds	r3, #8
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	e004      	b.n	8000e0e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	3314      	adds	r3, #20
 8000e0c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	461a      	mov	r2, r3
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	795b      	ldrb	r3, [r3, #5]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d101      	bne.n	8000e50 <HAL_DAC_ConfigChannel+0x18>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e11d      	b.n	800108c <HAL_DAC_ConfigChannel+0x254>
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2201      	movs	r2, #1
 8000e54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2202      	movs	r2, #2
 8000e5a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	d174      	bne.n	8000f4e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000e64:	f7ff fda0 	bl	80009a8 <HAL_GetTick>
 8000e68:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d134      	bne.n	8000eda <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000e70:	e011      	b.n	8000e96 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000e72:	f7ff fd99 	bl	80009a8 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d90a      	bls.n	8000e96 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	f043 0208 	orr.w	r2, r3, #8
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2203      	movs	r2, #3
 8000e90:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e0fa      	b.n	800108c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e9c:	4b7d      	ldr	r3, [pc, #500]	; (8001094 <HAL_DAC_ConfigChannel+0x25c>)
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1e6      	bne.n	8000e72 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f7ff fd8b 	bl	80009c0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	6992      	ldr	r2, [r2, #24]
 8000eb2:	641a      	str	r2, [r3, #64]	; 0x40
 8000eb4:	e01e      	b.n	8000ef4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000eb6:	f7ff fd77 	bl	80009a8 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d90a      	bls.n	8000eda <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	f043 0208 	orr.w	r2, r3, #8
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e0d8      	b.n	800108c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dbe8      	blt.n	8000eb6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f7ff fd6b 	bl	80009c0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	6992      	ldr	r2, [r2, #24]
 8000ef2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	ea02 0103 	and.w	r1, r2, r3
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	69da      	ldr	r2, [r3, #28]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f003 0310 	and.w	r3, r3, #16
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	21ff      	movs	r1, #255	; 0xff
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	ea02 0103 	and.w	r1, r2, r3
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	6a1a      	ldr	r2, [r3, #32]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	409a      	lsls	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d11d      	bne.n	8000f92 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f003 0310 	and.w	r3, r3, #16
 8000f64:	221f      	movs	r2, #31
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f98:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	4013      	ands	r3, r2
 8000fac:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d102      	bne.n	8000fbc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	e00f      	b.n	8000fdc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d102      	bne.n	8000fca <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	e008      	b.n	8000fdc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d102      	bne.n	8000fd8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e001      	b.n	8000fdc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6819      	ldr	r1, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	400a      	ands	r2, r1
 8001022:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	4013      	ands	r3, r2
 8001040:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	4313      	orrs	r3, r2
 8001058:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6819      	ldr	r1, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	22c0      	movs	r2, #192	; 0xc0
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43da      	mvns	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	400a      	ands	r2, r1
 800107c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2200      	movs	r2, #0
 8001088:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20008000 	.word	0x20008000

08001098 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010ba:	4b89      	ldr	r3, [pc, #548]	; (80012e0 <HAL_GPIO_Init+0x234>)
 80010bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010be:	e194      	b.n	80013ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	2101      	movs	r1, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 8186 	beq.w	80013e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d00b      	beq.n	80010f8 <HAL_GPIO_Init+0x4c>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d007      	beq.n	80010f8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ec:	2b11      	cmp	r3, #17
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b12      	cmp	r3, #18
 80010f6:	d130      	bne.n	800115a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800112e:	2201      	movs	r2, #1
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	091b      	lsrs	r3, r3, #4
 8001144:	f003 0201 	and.w	r2, r3, #1
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0xee>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b12      	cmp	r3, #18
 8001198:	d123      	bne.n	80011e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3208      	adds	r2, #8
 80011a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	220f      	movs	r2, #15
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	691a      	ldr	r2, [r3, #16]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	08da      	lsrs	r2, r3, #3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3208      	adds	r2, #8
 80011dc:	69b9      	ldr	r1, [r7, #24]
 80011de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0203 	and.w	r2, r3, #3
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 80e0 	beq.w	80013e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <HAL_GPIO_Init+0x238>)
 8001226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800122a:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <HAL_GPIO_Init+0x238>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001234:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <HAL_GPIO_Init+0x238>)
 8001236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001242:	4a29      	ldr	r2, [pc, #164]	; (80012e8 <HAL_GPIO_Init+0x23c>)
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a20      	ldr	r2, [pc, #128]	; (80012ec <HAL_GPIO_Init+0x240>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d052      	beq.n	8001314 <HAL_GPIO_Init+0x268>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <HAL_GPIO_Init+0x244>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d031      	beq.n	80012da <HAL_GPIO_Init+0x22e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <HAL_GPIO_Init+0x248>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d02b      	beq.n	80012d6 <HAL_GPIO_Init+0x22a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <HAL_GPIO_Init+0x24c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d025      	beq.n	80012d2 <HAL_GPIO_Init+0x226>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <HAL_GPIO_Init+0x250>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d01f      	beq.n	80012ce <HAL_GPIO_Init+0x222>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <HAL_GPIO_Init+0x254>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d019      	beq.n	80012ca <HAL_GPIO_Init+0x21e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a1a      	ldr	r2, [pc, #104]	; (8001304 <HAL_GPIO_Init+0x258>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d013      	beq.n	80012c6 <HAL_GPIO_Init+0x21a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a19      	ldr	r2, [pc, #100]	; (8001308 <HAL_GPIO_Init+0x25c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d00d      	beq.n	80012c2 <HAL_GPIO_Init+0x216>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a18      	ldr	r2, [pc, #96]	; (800130c <HAL_GPIO_Init+0x260>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x212>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a17      	ldr	r2, [pc, #92]	; (8001310 <HAL_GPIO_Init+0x264>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_GPIO_Init+0x20e>
 80012b6:	2309      	movs	r3, #9
 80012b8:	e02d      	b.n	8001316 <HAL_GPIO_Init+0x26a>
 80012ba:	230a      	movs	r3, #10
 80012bc:	e02b      	b.n	8001316 <HAL_GPIO_Init+0x26a>
 80012be:	2308      	movs	r3, #8
 80012c0:	e029      	b.n	8001316 <HAL_GPIO_Init+0x26a>
 80012c2:	2307      	movs	r3, #7
 80012c4:	e027      	b.n	8001316 <HAL_GPIO_Init+0x26a>
 80012c6:	2306      	movs	r3, #6
 80012c8:	e025      	b.n	8001316 <HAL_GPIO_Init+0x26a>
 80012ca:	2305      	movs	r3, #5
 80012cc:	e023      	b.n	8001316 <HAL_GPIO_Init+0x26a>
 80012ce:	2304      	movs	r3, #4
 80012d0:	e021      	b.n	8001316 <HAL_GPIO_Init+0x26a>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e01f      	b.n	8001316 <HAL_GPIO_Init+0x26a>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e01d      	b.n	8001316 <HAL_GPIO_Init+0x26a>
 80012da:	2301      	movs	r3, #1
 80012dc:	e01b      	b.n	8001316 <HAL_GPIO_Init+0x26a>
 80012de:	bf00      	nop
 80012e0:	58000080 	.word	0x58000080
 80012e4:	58024400 	.word	0x58024400
 80012e8:	58000400 	.word	0x58000400
 80012ec:	58020000 	.word	0x58020000
 80012f0:	58020400 	.word	0x58020400
 80012f4:	58020800 	.word	0x58020800
 80012f8:	58020c00 	.word	0x58020c00
 80012fc:	58021000 	.word	0x58021000
 8001300:	58021400 	.word	0x58021400
 8001304:	58021800 	.word	0x58021800
 8001308:	58021c00 	.word	0x58021c00
 800130c:	58022000 	.word	0x58022000
 8001310:	58022400 	.word	0x58022400
 8001314:	2300      	movs	r3, #0
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	f002 0203 	and.w	r2, r2, #3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4093      	lsls	r3, r2
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001326:	4938      	ldr	r1, [pc, #224]	; (8001408 <HAL_GPIO_Init+0x35c>)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3301      	adds	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f47f ae63 	bne.w	80010c0 <HAL_GPIO_Init+0x14>
  }
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	3724      	adds	r7, #36	; 0x24
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	58000400 	.word	0x58000400

0800140c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_PWREx_ConfigSupply+0x70>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b04      	cmp	r3, #4
 800141e:	d00a      	beq.n	8001436 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_PWREx_ConfigSupply+0x70>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	429a      	cmp	r2, r3
 800142c:	d001      	beq.n	8001432 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e01f      	b.n	8001472 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e01d      	b.n	8001472 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_PWREx_ConfigSupply+0x70>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f023 0207 	bic.w	r2, r3, #7
 800143e:	490f      	ldr	r1, [pc, #60]	; (800147c <HAL_PWREx_ConfigSupply+0x70>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4313      	orrs	r3, r2
 8001444:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001446:	f7ff faaf 	bl	80009a8 <HAL_GetTick>
 800144a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800144c:	e009      	b.n	8001462 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800144e:	f7ff faab 	bl	80009a8 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800145c:	d901      	bls.n	8001462 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e007      	b.n	8001472 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_PWREx_ConfigSupply+0x70>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800146a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800146e:	d1ee      	bne.n	800144e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	58024800 	.word	0x58024800

08001480 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e3ff      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 8087 	beq.w	80015ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a0:	4b99      	ldr	r3, [pc, #612]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014aa:	4b97      	ldr	r3, [pc, #604]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b2:	2b10      	cmp	r3, #16
 80014b4:	d007      	beq.n	80014c6 <HAL_RCC_OscConfig+0x46>
 80014b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b8:	2b18      	cmp	r3, #24
 80014ba:	d110      	bne.n	80014de <HAL_RCC_OscConfig+0x5e>
 80014bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d10b      	bne.n	80014de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c6:	4b90      	ldr	r3, [pc, #576]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d06c      	beq.n	80015ac <HAL_RCC_OscConfig+0x12c>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d168      	bne.n	80015ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e3d9      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x76>
 80014e8:	4b87      	ldr	r3, [pc, #540]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a86      	ldr	r2, [pc, #536]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80014ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	e02e      	b.n	8001554 <HAL_RCC_OscConfig+0xd4>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x98>
 80014fe:	4b82      	ldr	r3, [pc, #520]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a81      	ldr	r2, [pc, #516]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	4b7f      	ldr	r3, [pc, #508]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a7e      	ldr	r2, [pc, #504]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e01d      	b.n	8001554 <HAL_RCC_OscConfig+0xd4>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0xbc>
 8001522:	4b79      	ldr	r3, [pc, #484]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a78      	ldr	r2, [pc, #480]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b76      	ldr	r3, [pc, #472]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a75      	ldr	r2, [pc, #468]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0xd4>
 800153c:	4b72      	ldr	r3, [pc, #456]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a71      	ldr	r2, [pc, #452]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b6f      	ldr	r3, [pc, #444]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a6e      	ldr	r2, [pc, #440]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 800154e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d013      	beq.n	8001584 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fa24 	bl	80009a8 <HAL_GetTick>
 8001560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fa20 	bl	80009a8 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	; 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e38d      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001576:	4b64      	ldr	r3, [pc, #400]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0xe4>
 8001582:	e014      	b.n	80015ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fa10 	bl	80009a8 <HAL_GetTick>
 8001588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fa0c 	bl	80009a8 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e379      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800159e:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x10c>
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 80ae 	beq.w	8001718 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015bc:	4b52      	ldr	r3, [pc, #328]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015c6:	4b50      	ldr	r3, [pc, #320]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <HAL_RCC_OscConfig+0x162>
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	2b18      	cmp	r3, #24
 80015d6:	d13a      	bne.n	800164e <HAL_RCC_OscConfig+0x1ce>
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d135      	bne.n	800164e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e2:	4b49      	ldr	r3, [pc, #292]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d005      	beq.n	80015fa <HAL_RCC_OscConfig+0x17a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e34b      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fa:	f7ff fa05 	bl	8000a08 <HAL_GetREVID>
 80015fe:	4603      	mov	r3, r0
 8001600:	f241 0203 	movw	r2, #4099	; 0x1003
 8001604:	4293      	cmp	r3, r2
 8001606:	d817      	bhi.n	8001638 <HAL_RCC_OscConfig+0x1b8>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	2b40      	cmp	r3, #64	; 0x40
 800160e:	d108      	bne.n	8001622 <HAL_RCC_OscConfig+0x1a2>
 8001610:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001618:	4a3b      	ldr	r2, [pc, #236]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 800161a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001620:	e07a      	b.n	8001718 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001622:	4b39      	ldr	r3, [pc, #228]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	031b      	lsls	r3, r3, #12
 8001630:	4935      	ldr	r1, [pc, #212]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001632:	4313      	orrs	r3, r2
 8001634:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001636:	e06f      	b.n	8001718 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	4930      	ldr	r1, [pc, #192]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164c:	e064      	b.n	8001718 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d045      	beq.n	80016e2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001656:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 0219 	bic.w	r2, r3, #25
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	4929      	ldr	r1, [pc, #164]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff f99e 	bl	80009a8 <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001670:	f7ff f99a 	bl	80009a8 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e307      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	f7ff f9bb 	bl	8000a08 <HAL_GetREVID>
 8001692:	4603      	mov	r3, r0
 8001694:	f241 0203 	movw	r2, #4099	; 0x1003
 8001698:	4293      	cmp	r3, r2
 800169a:	d817      	bhi.n	80016cc <HAL_RCC_OscConfig+0x24c>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	2b40      	cmp	r3, #64	; 0x40
 80016a2:	d108      	bne.n	80016b6 <HAL_RCC_OscConfig+0x236>
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80016ac:	4a16      	ldr	r2, [pc, #88]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80016ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b2:	6053      	str	r3, [r2, #4]
 80016b4:	e030      	b.n	8001718 <HAL_RCC_OscConfig+0x298>
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	031b      	lsls	r3, r3, #12
 80016c4:	4910      	ldr	r1, [pc, #64]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
 80016ca:	e025      	b.n	8001718 <HAL_RCC_OscConfig+0x298>
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	490b      	ldr	r1, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
 80016e0:	e01a      	b.n	8001718 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <HAL_RCC_OscConfig+0x288>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff f95b 	bl	80009a8 <HAL_GetTick>
 80016f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016f4:	e00a      	b.n	800170c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f6:	f7ff f957 	bl	80009a8 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d903      	bls.n	800170c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e2c4      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
 8001708:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800170c:	4ba4      	ldr	r3, [pc, #656]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1ee      	bne.n	80016f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80a9 	beq.w	8001878 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001726:	4b9e      	ldr	r3, [pc, #632]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800172e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001730:	4b9b      	ldr	r3, [pc, #620]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b08      	cmp	r3, #8
 800173a:	d007      	beq.n	800174c <HAL_RCC_OscConfig+0x2cc>
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b18      	cmp	r3, #24
 8001740:	d13a      	bne.n	80017b8 <HAL_RCC_OscConfig+0x338>
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d135      	bne.n	80017b8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800174c:	4b94      	ldr	r3, [pc, #592]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_OscConfig+0x2e4>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	2b80      	cmp	r3, #128	; 0x80
 800175e:	d001      	beq.n	8001764 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e296      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001764:	f7ff f950 	bl	8000a08 <HAL_GetREVID>
 8001768:	4603      	mov	r3, r0
 800176a:	f241 0203 	movw	r2, #4099	; 0x1003
 800176e:	4293      	cmp	r3, r2
 8001770:	d817      	bhi.n	80017a2 <HAL_RCC_OscConfig+0x322>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	2b20      	cmp	r3, #32
 8001778:	d108      	bne.n	800178c <HAL_RCC_OscConfig+0x30c>
 800177a:	4b89      	ldr	r3, [pc, #548]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001782:	4a87      	ldr	r2, [pc, #540]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 8001784:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001788:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800178a:	e075      	b.n	8001878 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800178c:	4b84      	ldr	r3, [pc, #528]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	069b      	lsls	r3, r3, #26
 800179a:	4981      	ldr	r1, [pc, #516]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017a0:	e06a      	b.n	8001878 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017a2:	4b7f      	ldr	r3, [pc, #508]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	061b      	lsls	r3, r3, #24
 80017b0:	497b      	ldr	r1, [pc, #492]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017b6:	e05f      	b.n	8001878 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d042      	beq.n	8001846 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017c0:	4b77      	ldr	r3, [pc, #476]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a76      	ldr	r2, [pc, #472]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 80017c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff f8ec 	bl	80009a8 <HAL_GetTick>
 80017d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017d4:	f7ff f8e8 	bl	80009a8 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e255      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017e6:	4b6e      	ldr	r3, [pc, #440]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017f2:	f7ff f909 	bl	8000a08 <HAL_GetREVID>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d817      	bhi.n	8001830 <HAL_RCC_OscConfig+0x3b0>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	2b20      	cmp	r3, #32
 8001806:	d108      	bne.n	800181a <HAL_RCC_OscConfig+0x39a>
 8001808:	4b65      	ldr	r3, [pc, #404]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001810:	4a63      	ldr	r2, [pc, #396]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 8001812:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001816:	6053      	str	r3, [r2, #4]
 8001818:	e02e      	b.n	8001878 <HAL_RCC_OscConfig+0x3f8>
 800181a:	4b61      	ldr	r3, [pc, #388]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	069b      	lsls	r3, r3, #26
 8001828:	495d      	ldr	r1, [pc, #372]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
 800182e:	e023      	b.n	8001878 <HAL_RCC_OscConfig+0x3f8>
 8001830:	4b5b      	ldr	r3, [pc, #364]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	061b      	lsls	r3, r3, #24
 800183e:	4958      	ldr	r1, [pc, #352]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 8001840:	4313      	orrs	r3, r2
 8001842:	60cb      	str	r3, [r1, #12]
 8001844:	e018      	b.n	8001878 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001846:	4b56      	ldr	r3, [pc, #344]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a55      	ldr	r2, [pc, #340]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 800184c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7ff f8a9 	bl	80009a8 <HAL_GetTick>
 8001856:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800185a:	f7ff f8a5 	bl	80009a8 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e212      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800186c:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d036      	beq.n	80018f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d019      	beq.n	80018c0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188c:	4b44      	ldr	r3, [pc, #272]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 800188e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001890:	4a43      	ldr	r2, [pc, #268]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001898:	f7ff f886 	bl	80009a8 <HAL_GetTick>
 800189c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff f882 	bl	80009a8 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e1ef      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018b2:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 80018b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x420>
 80018be:	e018      	b.n	80018f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c0:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 80018c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c4:	4a36      	ldr	r2, [pc, #216]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018cc:	f7ff f86c 	bl	80009a8 <HAL_GetTick>
 80018d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d4:	f7ff f868 	bl	80009a8 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e1d5      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018e6:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 80018e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d036      	beq.n	800196c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d019      	beq.n	800193a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a25      	ldr	r2, [pc, #148]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 800190c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001910:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001912:	f7ff f849 	bl	80009a8 <HAL_GetTick>
 8001916:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800191a:	f7ff f845 	bl	80009a8 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e1b2      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800192c:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x49a>
 8001938:	e018      	b.n	800196c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 8001940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001944:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001946:	f7ff f82f 	bl	80009a8 <HAL_GetTick>
 800194a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800194e:	f7ff f82b 	bl	80009a8 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e198      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_RCC_OscConfig+0x520>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 8085 	beq.w	8001a84 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_RCC_OscConfig+0x524>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <HAL_RCC_OscConfig+0x524>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001986:	f7ff f80f 	bl	80009a8 <HAL_GetTick>
 800198a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800198c:	e00c      	b.n	80019a8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800198e:	f7ff f80b 	bl	80009a8 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b64      	cmp	r3, #100	; 0x64
 800199a:	d905      	bls.n	80019a8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e178      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
 80019a0:	58024400 	.word	0x58024400
 80019a4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019a8:	4b96      	ldr	r3, [pc, #600]	; (8001c04 <HAL_RCC_OscConfig+0x784>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0ec      	beq.n	800198e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x54a>
 80019bc:	4b92      	ldr	r3, [pc, #584]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a91      	ldr	r2, [pc, #580]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
 80019c8:	e02d      	b.n	8001a26 <HAL_RCC_OscConfig+0x5a6>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x56c>
 80019d2:	4b8d      	ldr	r3, [pc, #564]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a8c      	ldr	r2, [pc, #560]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
 80019de:	4b8a      	ldr	r3, [pc, #552]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	4a89      	ldr	r2, [pc, #548]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ea:	e01c      	b.n	8001a26 <HAL_RCC_OscConfig+0x5a6>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d10c      	bne.n	8001a0e <HAL_RCC_OscConfig+0x58e>
 80019f4:	4b84      	ldr	r3, [pc, #528]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	4a83      	ldr	r2, [pc, #524]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001a00:	4b81      	ldr	r3, [pc, #516]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	4a80      	ldr	r2, [pc, #512]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0c:	e00b      	b.n	8001a26 <HAL_RCC_OscConfig+0x5a6>
 8001a0e:	4b7e      	ldr	r3, [pc, #504]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	4a7d      	ldr	r2, [pc, #500]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1a:	4b7b      	ldr	r3, [pc, #492]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1e:	4a7a      	ldr	r2, [pc, #488]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001a20:	f023 0304 	bic.w	r3, r3, #4
 8001a24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d015      	beq.n	8001a5a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2e:	f7fe ffbb 	bl	80009a8 <HAL_GetTick>
 8001a32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7fe ffb7 	bl	80009a8 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e122      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a4c:	4b6e      	ldr	r3, [pc, #440]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ee      	beq.n	8001a36 <HAL_RCC_OscConfig+0x5b6>
 8001a58:	e014      	b.n	8001a84 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7fe ffa5 	bl	80009a8 <HAL_GetTick>
 8001a5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7fe ffa1 	bl	80009a8 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e10c      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a78:	4b63      	ldr	r3, [pc, #396]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ee      	bne.n	8001a62 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 8101 	beq.w	8001c90 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a8e:	4b5e      	ldr	r3, [pc, #376]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a96:	2b18      	cmp	r3, #24
 8001a98:	f000 80bc 	beq.w	8001c14 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	f040 8095 	bne.w	8001bd0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa6:	4b58      	ldr	r3, [pc, #352]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab2:	f7fe ff79 	bl	80009a8 <HAL_GetTick>
 8001ab6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aba:	f7fe ff75 	bl	80009a8 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e0e2      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001acc:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f0      	bne.n	8001aba <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001adc:	4b4b      	ldr	r3, [pc, #300]	; (8001c0c <HAL_RCC_OscConfig+0x78c>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	430a      	orrs	r2, r1
 8001aec:	4946      	ldr	r1, [pc, #280]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	628b      	str	r3, [r1, #40]	; 0x28
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b00:	3b01      	subs	r3, #1
 8001b02:	025b      	lsls	r3, r3, #9
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	041b      	lsls	r3, r3, #16
 8001b10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b22:	4939      	ldr	r1, [pc, #228]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001b28:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	4a36      	ldr	r2, [pc, #216]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b2e:	f023 0301 	bic.w	r3, r3, #1
 8001b32:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b34:	4b34      	ldr	r3, [pc, #208]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <HAL_RCC_OscConfig+0x790>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b40:	00d2      	lsls	r2, r2, #3
 8001b42:	4931      	ldr	r1, [pc, #196]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b48:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	f023 020c 	bic.w	r2, r3, #12
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	492c      	ldr	r1, [pc, #176]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b5a:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	f023 0202 	bic.w	r2, r3, #2
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4928      	ldr	r1, [pc, #160]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b6c:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	4a25      	ldr	r2, [pc, #148]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	4a22      	ldr	r2, [pc, #136]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b84:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7fe fefe 	bl	80009a8 <HAL_GetTick>
 8001bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7fe fefa 	bl	80009a8 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e067      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x730>
 8001bce:	e05f      	b.n	8001c90 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0c      	ldr	r2, [pc, #48]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7fe fee4 	bl	80009a8 <HAL_GetTick>
 8001be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be4:	f7fe fee0 	bl	80009a8 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e04d      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <HAL_RCC_OscConfig+0x788>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x764>
 8001c02:	e045      	b.n	8001c90 <HAL_RCC_OscConfig+0x810>
 8001c04:	58024800 	.word	0x58024800
 8001c08:	58024400 	.word	0x58024400
 8001c0c:	fffffc0c 	.word	0xfffffc0c
 8001c10:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <HAL_RCC_OscConfig+0x81c>)
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_RCC_OscConfig+0x81c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d031      	beq.n	8001c8c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	f003 0203 	and.w	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d12a      	bne.n	8001c8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d122      	bne.n	8001c8c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d11a      	bne.n	8001c8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	0a5b      	lsrs	r3, r3, #9
 8001c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c62:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d111      	bne.n	8001c8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	0c1b      	lsrs	r3, r3, #16
 8001c6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d108      	bne.n	8001c8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	0e1b      	lsrs	r3, r3, #24
 8001c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c86:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3730      	adds	r7, #48	; 0x30
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	58024400 	.word	0x58024400

08001ca0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e19c      	b.n	8001fee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b8a      	ldr	r3, [pc, #552]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d910      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b87      	ldr	r3, [pc, #540]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 020f 	bic.w	r2, r3, #15
 8001cca:	4985      	ldr	r1, [pc, #532]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b83      	ldr	r3, [pc, #524]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e184      	b.n	8001fee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d010      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	4b7b      	ldr	r3, [pc, #492]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d908      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d00:	4b78      	ldr	r3, [pc, #480]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	4975      	ldr	r1, [pc, #468]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d010      	beq.n	8001d40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	4b70      	ldr	r3, [pc, #448]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d908      	bls.n	8001d40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d2e:	4b6d      	ldr	r3, [pc, #436]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	496a      	ldr	r1, [pc, #424]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d010      	beq.n	8001d6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	4b64      	ldr	r3, [pc, #400]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d908      	bls.n	8001d6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d5c:	4b61      	ldr	r3, [pc, #388]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	495e      	ldr	r1, [pc, #376]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d010      	beq.n	8001d9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	4b59      	ldr	r3, [pc, #356]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d908      	bls.n	8001d9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001d8a:	4b56      	ldr	r3, [pc, #344]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4953      	ldr	r1, [pc, #332]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d010      	beq.n	8001dca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	4b4d      	ldr	r3, [pc, #308]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d908      	bls.n	8001dca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b4a      	ldr	r3, [pc, #296]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f023 020f 	bic.w	r2, r3, #15
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4947      	ldr	r1, [pc, #284]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d055      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001dd6:	4b43      	ldr	r3, [pc, #268]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	4940      	ldr	r1, [pc, #256]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d107      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001df0:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d121      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0f6      	b.n	8001fee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d107      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e08:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d115      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0ea      	b.n	8001fee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d107      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e20:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d109      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0de      	b.n	8001fee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e30:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0d6      	b.n	8001fee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f023 0207 	bic.w	r2, r3, #7
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4925      	ldr	r1, [pc, #148]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7fe fda9 	bl	80009a8 <HAL_GetTick>
 8001e56:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e58:	e00a      	b.n	8001e70 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5a:	f7fe fda5 	bl	80009a8 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e0be      	b.n	8001fee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d1eb      	bne.n	8001e5a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d010      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d208      	bcs.n	8001eb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f023 020f 	bic.w	r2, r3, #15
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	490e      	ldr	r1, [pc, #56]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d214      	bcs.n	8001ee8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 020f 	bic.w	r2, r3, #15
 8001ec6:	4906      	ldr	r1, [pc, #24]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d005      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e086      	b.n	8001fee <HAL_RCC_ClockConfig+0x34e>
 8001ee0:	52002000 	.word	0x52002000
 8001ee4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d010      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	4b3f      	ldr	r3, [pc, #252]	; (8001ff8 <HAL_RCC_ClockConfig+0x358>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d208      	bcs.n	8001f16 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f04:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <HAL_RCC_ClockConfig+0x358>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	4939      	ldr	r1, [pc, #228]	; (8001ff8 <HAL_RCC_ClockConfig+0x358>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d010      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	4b34      	ldr	r3, [pc, #208]	; (8001ff8 <HAL_RCC_ClockConfig+0x358>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d208      	bcs.n	8001f44 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f32:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_RCC_ClockConfig+0x358>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	492e      	ldr	r1, [pc, #184]	; (8001ff8 <HAL_RCC_ClockConfig+0x358>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d010      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <HAL_RCC_ClockConfig+0x358>)
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d208      	bcs.n	8001f72 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f60:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <HAL_RCC_ClockConfig+0x358>)
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4922      	ldr	r1, [pc, #136]	; (8001ff8 <HAL_RCC_ClockConfig+0x358>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCC_ClockConfig+0x358>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d208      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <HAL_RCC_ClockConfig+0x358>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4917      	ldr	r1, [pc, #92]	; (8001ff8 <HAL_RCC_ClockConfig+0x358>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fa0:	f000 f834 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_RCC_ClockConfig+0x358>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	0a1b      	lsrs	r3, r3, #8
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	4912      	ldr	r1, [pc, #72]	; (8001ffc <HAL_RCC_ClockConfig+0x35c>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_RCC_ClockConfig+0x358>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_RCC_ClockConfig+0x35c>)
 8001fc8:	5cd3      	ldrb	r3, [r2, r3]
 8001fca:	f003 031f 	and.w	r3, r3, #31
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd4:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <HAL_RCC_ClockConfig+0x360>)
 8001fd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fd8:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HAL_RCC_ClockConfig+0x364>)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_RCC_ClockConfig+0x368>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fc96 	bl	8000914 <HAL_InitTick>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	58024400 	.word	0x58024400
 8001ffc:	08002a10 	.word	0x08002a10
 8002000:	20001db0 	.word	0x20001db0
 8002004:	20001dac 	.word	0x20001dac
 8002008:	20001db4 	.word	0x20001db4

0800200c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002012:	4bb3      	ldr	r3, [pc, #716]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800201a:	2b18      	cmp	r3, #24
 800201c:	f200 8155 	bhi.w	80022ca <HAL_RCC_GetSysClockFreq+0x2be>
 8002020:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002026:	bf00      	nop
 8002028:	0800208d 	.word	0x0800208d
 800202c:	080022cb 	.word	0x080022cb
 8002030:	080022cb 	.word	0x080022cb
 8002034:	080022cb 	.word	0x080022cb
 8002038:	080022cb 	.word	0x080022cb
 800203c:	080022cb 	.word	0x080022cb
 8002040:	080022cb 	.word	0x080022cb
 8002044:	080022cb 	.word	0x080022cb
 8002048:	080020b3 	.word	0x080020b3
 800204c:	080022cb 	.word	0x080022cb
 8002050:	080022cb 	.word	0x080022cb
 8002054:	080022cb 	.word	0x080022cb
 8002058:	080022cb 	.word	0x080022cb
 800205c:	080022cb 	.word	0x080022cb
 8002060:	080022cb 	.word	0x080022cb
 8002064:	080022cb 	.word	0x080022cb
 8002068:	080020b9 	.word	0x080020b9
 800206c:	080022cb 	.word	0x080022cb
 8002070:	080022cb 	.word	0x080022cb
 8002074:	080022cb 	.word	0x080022cb
 8002078:	080022cb 	.word	0x080022cb
 800207c:	080022cb 	.word	0x080022cb
 8002080:	080022cb 	.word	0x080022cb
 8002084:	080022cb 	.word	0x080022cb
 8002088:	080020bf 	.word	0x080020bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800208c:	4b94      	ldr	r3, [pc, #592]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d009      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002098:	4b91      	ldr	r3, [pc, #580]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	08db      	lsrs	r3, r3, #3
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	4a90      	ldr	r2, [pc, #576]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80020aa:	e111      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80020ac:	4b8d      	ldr	r3, [pc, #564]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020ae:	61bb      	str	r3, [r7, #24]
    break;
 80020b0:	e10e      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80020b2:	4b8d      	ldr	r3, [pc, #564]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020b4:	61bb      	str	r3, [r7, #24]
    break;
 80020b6:	e10b      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80020b8:	4b8c      	ldr	r3, [pc, #560]	; (80022ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80020ba:	61bb      	str	r3, [r7, #24]
    break;
 80020bc:	e108      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020be:	4b88      	ldr	r3, [pc, #544]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80020c8:	4b85      	ldr	r3, [pc, #532]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020d4:	4b82      	ldr	r3, [pc, #520]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80020de:	4b80      	ldr	r3, [pc, #512]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e2:	08db      	lsrs	r3, r3, #3
 80020e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80e1 	beq.w	80022c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b02      	cmp	r3, #2
 8002106:	f000 8083 	beq.w	8002210 <HAL_RCC_GetSysClockFreq+0x204>
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b02      	cmp	r3, #2
 800210e:	f200 80a1 	bhi.w	8002254 <HAL_RCC_GetSysClockFreq+0x248>
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x114>
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d056      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800211e:	e099      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002120:	4b6f      	ldr	r3, [pc, #444]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0320 	and.w	r3, r3, #32
 8002128:	2b00      	cmp	r3, #0
 800212a:	d02d      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800212c:	4b6c      	ldr	r3, [pc, #432]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	08db      	lsrs	r3, r3, #3
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	4a6b      	ldr	r2, [pc, #428]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
 800213c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	ee07 3a90 	vmov	s15, r3
 8002144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	ee07 3a90 	vmov	s15, r3
 800214e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002156:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002166:	ed97 6a02 	vldr	s12, [r7, #8]
 800216a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80022f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800216e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800217a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002186:	e087      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002192:	eddf 6a58 	vldr	s13, [pc, #352]	; 80022f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800219a:	4b51      	ldr	r3, [pc, #324]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 80022f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021ca:	e065      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80022f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021de:	4b40      	ldr	r3, [pc, #256]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80021f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80022f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800220e:	e043      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800221a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80022fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800221e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002222:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002232:	ed97 6a02 	vldr	s12, [r7, #8]
 8002236:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80022f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800223a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800223e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800224a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002252:	e021      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800225e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80022f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002266:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002276:	ed97 6a02 	vldr	s12, [r7, #8]
 800227a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80022f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800227e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800228a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800228e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002296:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	0a5b      	lsrs	r3, r3, #9
 800229e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022a2:	3301      	adds	r3, #1
 80022a4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	ee07 3a90 	vmov	s15, r3
 80022ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80022b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022bc:	ee17 3a90 	vmov	r3, s15
 80022c0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80022c2:	e005      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61bb      	str	r3, [r7, #24]
    break;
 80022c8:	e002      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022cc:	61bb      	str	r3, [r7, #24]
    break;
 80022ce:	bf00      	nop
  }

  return sysclockfreq;
 80022d0:	69bb      	ldr	r3, [r7, #24]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	; 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	58024400 	.word	0x58024400
 80022e4:	03d09000 	.word	0x03d09000
 80022e8:	003d0900 	.word	0x003d0900
 80022ec:	007a1200 	.word	0x007a1200
 80022f0:	46000000 	.word	0x46000000
 80022f4:	4c742400 	.word	0x4c742400
 80022f8:	4a742400 	.word	0x4a742400
 80022fc:	4af42400 	.word	0x4af42400

08002300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e049      	b.n	80023a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe f9a2 	bl	8000670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3304      	adds	r3, #4
 800233c:	4619      	mov	r1, r3
 800233e:	4610      	mov	r0, r2
 8002340:	f000 f9ee 	bl	8002720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d001      	beq.n	80023c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e04f      	b.n	8002468 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a23      	ldr	r2, [pc, #140]	; (8002474 <HAL_TIM_Base_Start_IT+0xc4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01d      	beq.n	8002426 <HAL_TIM_Base_Start_IT+0x76>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f2:	d018      	beq.n	8002426 <HAL_TIM_Base_Start_IT+0x76>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <HAL_TIM_Base_Start_IT+0xc8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_TIM_Base_Start_IT+0x76>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_TIM_Base_Start_IT+0xcc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00e      	beq.n	8002426 <HAL_TIM_Base_Start_IT+0x76>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <HAL_TIM_Base_Start_IT+0xd0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d009      	beq.n	8002426 <HAL_TIM_Base_Start_IT+0x76>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <HAL_TIM_Base_Start_IT+0xd4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_TIM_Base_Start_IT+0x76>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a19      	ldr	r2, [pc, #100]	; (8002488 <HAL_TIM_Base_Start_IT+0xd8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d115      	bne.n	8002452 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_TIM_Base_Start_IT+0xdc>)
 800242e:	4013      	ands	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b06      	cmp	r3, #6
 8002436:	d015      	beq.n	8002464 <HAL_TIM_Base_Start_IT+0xb4>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243e:	d011      	beq.n	8002464 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002450:	e008      	b.n	8002464 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e000      	b.n	8002466 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002464:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40010000 	.word	0x40010000
 8002478:	40000400 	.word	0x40000400
 800247c:	40000800 	.word	0x40000800
 8002480:	40000c00 	.word	0x40000c00
 8002484:	40010400 	.word	0x40010400
 8002488:	40001800 	.word	0x40001800
 800248c:	00010007 	.word	0x00010007

08002490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d122      	bne.n	80024ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d11b      	bne.n	80024ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0202 	mvn.w	r2, #2
 80024bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f905 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 80024d8:	e005      	b.n	80024e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f8f7 	bl	80026ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f908 	bl	80026f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d122      	bne.n	8002540 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b04      	cmp	r3, #4
 8002506:	d11b      	bne.n	8002540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0204 	mvn.w	r2, #4
 8002510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2202      	movs	r2, #2
 8002516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f8db 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 800252c:	e005      	b.n	800253a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f8cd 	bl	80026ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f8de 	bl	80026f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b08      	cmp	r3, #8
 800254c:	d122      	bne.n	8002594 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b08      	cmp	r3, #8
 800255a:	d11b      	bne.n	8002594 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0208 	mvn.w	r2, #8
 8002564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2204      	movs	r2, #4
 800256a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f8b1 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 8002580:	e005      	b.n	800258e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f8a3 	bl	80026ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f8b4 	bl	80026f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d122      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0210 	mvn.w	r2, #16
 80025b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2208      	movs	r2, #8
 80025be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f887 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f879 	bl	80026ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f88a 	bl	80026f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d10e      	bne.n	8002614 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d107      	bne.n	8002614 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0201 	mvn.w	r2, #1
 800260c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fd fe62 	bl	80002d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	2b80      	cmp	r3, #128	; 0x80
 8002620:	d10e      	bne.n	8002640 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262c:	2b80      	cmp	r3, #128	; 0x80
 800262e:	d107      	bne.n	8002640 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f99c 	bl	8002978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800264e:	d10e      	bne.n	800266e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265a:	2b80      	cmp	r3, #128	; 0x80
 800265c:	d107      	bne.n	800266e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f98f 	bl	800298c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002678:	2b40      	cmp	r3, #64	; 0x40
 800267a:	d10e      	bne.n	800269a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002686:	2b40      	cmp	r3, #64	; 0x40
 8002688:	d107      	bne.n	800269a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f838 	bl	800270a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d10e      	bne.n	80026c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d107      	bne.n	80026c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f06f 0220 	mvn.w	r2, #32
 80026be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f94f 	bl	8002964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a40      	ldr	r2, [pc, #256]	; (8002834 <TIM_Base_SetConfig+0x114>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d013      	beq.n	8002760 <TIM_Base_SetConfig+0x40>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273e:	d00f      	beq.n	8002760 <TIM_Base_SetConfig+0x40>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a3d      	ldr	r2, [pc, #244]	; (8002838 <TIM_Base_SetConfig+0x118>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00b      	beq.n	8002760 <TIM_Base_SetConfig+0x40>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a3c      	ldr	r2, [pc, #240]	; (800283c <TIM_Base_SetConfig+0x11c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d007      	beq.n	8002760 <TIM_Base_SetConfig+0x40>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a3b      	ldr	r2, [pc, #236]	; (8002840 <TIM_Base_SetConfig+0x120>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d003      	beq.n	8002760 <TIM_Base_SetConfig+0x40>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a3a      	ldr	r2, [pc, #232]	; (8002844 <TIM_Base_SetConfig+0x124>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d108      	bne.n	8002772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a2f      	ldr	r2, [pc, #188]	; (8002834 <TIM_Base_SetConfig+0x114>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01f      	beq.n	80027ba <TIM_Base_SetConfig+0x9a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002780:	d01b      	beq.n	80027ba <TIM_Base_SetConfig+0x9a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a2c      	ldr	r2, [pc, #176]	; (8002838 <TIM_Base_SetConfig+0x118>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d017      	beq.n	80027ba <TIM_Base_SetConfig+0x9a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a2b      	ldr	r2, [pc, #172]	; (800283c <TIM_Base_SetConfig+0x11c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <TIM_Base_SetConfig+0x9a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a2a      	ldr	r2, [pc, #168]	; (8002840 <TIM_Base_SetConfig+0x120>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00f      	beq.n	80027ba <TIM_Base_SetConfig+0x9a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a29      	ldr	r2, [pc, #164]	; (8002844 <TIM_Base_SetConfig+0x124>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00b      	beq.n	80027ba <TIM_Base_SetConfig+0x9a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a28      	ldr	r2, [pc, #160]	; (8002848 <TIM_Base_SetConfig+0x128>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d007      	beq.n	80027ba <TIM_Base_SetConfig+0x9a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a27      	ldr	r2, [pc, #156]	; (800284c <TIM_Base_SetConfig+0x12c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d003      	beq.n	80027ba <TIM_Base_SetConfig+0x9a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a26      	ldr	r2, [pc, #152]	; (8002850 <TIM_Base_SetConfig+0x130>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d108      	bne.n	80027cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <TIM_Base_SetConfig+0x114>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00f      	beq.n	8002818 <TIM_Base_SetConfig+0xf8>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <TIM_Base_SetConfig+0x124>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00b      	beq.n	8002818 <TIM_Base_SetConfig+0xf8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a11      	ldr	r2, [pc, #68]	; (8002848 <TIM_Base_SetConfig+0x128>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d007      	beq.n	8002818 <TIM_Base_SetConfig+0xf8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a10      	ldr	r2, [pc, #64]	; (800284c <TIM_Base_SetConfig+0x12c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d003      	beq.n	8002818 <TIM_Base_SetConfig+0xf8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a0f      	ldr	r2, [pc, #60]	; (8002850 <TIM_Base_SetConfig+0x130>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d103      	bne.n	8002820 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	615a      	str	r2, [r3, #20]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40010000 	.word	0x40010000
 8002838:	40000400 	.word	0x40000400
 800283c:	40000800 	.word	0x40000800
 8002840:	40000c00 	.word	0x40000c00
 8002844:	40010400 	.word	0x40010400
 8002848:	40014000 	.word	0x40014000
 800284c:	40014400 	.word	0x40014400
 8002850:	40014800 	.word	0x40014800

08002854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002868:	2302      	movs	r3, #2
 800286a:	e068      	b.n	800293e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a2e      	ldr	r2, [pc, #184]	; (800294c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2d      	ldr	r2, [pc, #180]	; (8002950 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d108      	bne.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80028a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1e      	ldr	r2, [pc, #120]	; (800294c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01d      	beq.n	8002912 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028de:	d018      	beq.n	8002912 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d013      	beq.n	8002912 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1a      	ldr	r2, [pc, #104]	; (8002958 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00e      	beq.n	8002912 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d009      	beq.n	8002912 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a13      	ldr	r2, [pc, #76]	; (8002950 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d004      	beq.n	8002912 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a14      	ldr	r2, [pc, #80]	; (8002960 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d10c      	bne.n	800292c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	4313      	orrs	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40010000 	.word	0x40010000
 8002950:	40010400 	.word	0x40010400
 8002954:	40000400 	.word	0x40000400
 8002958:	40000800 	.word	0x40000800
 800295c:	40000c00 	.word	0x40000c00
 8002960:	40001800 	.word	0x40001800

08002964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <__libc_init_array>:
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	4d0d      	ldr	r5, [pc, #52]	; (80029d8 <__libc_init_array+0x38>)
 80029a4:	4c0d      	ldr	r4, [pc, #52]	; (80029dc <__libc_init_array+0x3c>)
 80029a6:	1b64      	subs	r4, r4, r5
 80029a8:	10a4      	asrs	r4, r4, #2
 80029aa:	2600      	movs	r6, #0
 80029ac:	42a6      	cmp	r6, r4
 80029ae:	d109      	bne.n	80029c4 <__libc_init_array+0x24>
 80029b0:	4d0b      	ldr	r5, [pc, #44]	; (80029e0 <__libc_init_array+0x40>)
 80029b2:	4c0c      	ldr	r4, [pc, #48]	; (80029e4 <__libc_init_array+0x44>)
 80029b4:	f000 f820 	bl	80029f8 <_init>
 80029b8:	1b64      	subs	r4, r4, r5
 80029ba:	10a4      	asrs	r4, r4, #2
 80029bc:	2600      	movs	r6, #0
 80029be:	42a6      	cmp	r6, r4
 80029c0:	d105      	bne.n	80029ce <__libc_init_array+0x2e>
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c8:	4798      	blx	r3
 80029ca:	3601      	adds	r6, #1
 80029cc:	e7ee      	b.n	80029ac <__libc_init_array+0xc>
 80029ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d2:	4798      	blx	r3
 80029d4:	3601      	adds	r6, #1
 80029d6:	e7f2      	b.n	80029be <__libc_init_array+0x1e>
 80029d8:	08002a20 	.word	0x08002a20
 80029dc:	08002a20 	.word	0x08002a20
 80029e0:	08002a20 	.word	0x08002a20
 80029e4:	08002a24 	.word	0x08002a24

080029e8 <memset>:
 80029e8:	4402      	add	r2, r0
 80029ea:	4603      	mov	r3, r0
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d100      	bne.n	80029f2 <memset+0xa>
 80029f0:	4770      	bx	lr
 80029f2:	f803 1b01 	strb.w	r1, [r3], #1
 80029f6:	e7f9      	b.n	80029ec <memset+0x4>

080029f8 <_init>:
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	bf00      	nop
 80029fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fe:	bc08      	pop	{r3}
 8002a00:	469e      	mov	lr, r3
 8002a02:	4770      	bx	lr

08002a04 <_fini>:
 8002a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a06:	bf00      	nop
 8002a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0a:	bc08      	pop	{r3}
 8002a0c:	469e      	mov	lr, r3
 8002a0e:	4770      	bx	lr
