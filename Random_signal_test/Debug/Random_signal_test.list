
Random_signal_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039cc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08003c6c  08003c6c  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003dc8  08003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00002074  20000000  08003dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000020a4  20002074  08005e44  00022074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20004118  08005e44  00024118  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00022074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018cef  00000000  00000000  000220a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002a45  00000000  00000000  0003ad91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000dd0  00000000  00000000  0003d7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000cd8  00000000  00000000  0003e5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036d88  00000000  00000000  0003f280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000f3de  00000000  00000000  00076008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015c47d  00000000  00000000  000853e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001e1863  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004300  00000000  00000000  001e18b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20002074 	.word	0x20002074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08003c54 	.word	0x08003c54

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20002078 	.word	0x20002078
 80002dc:	08003c54 	.word	0x08003c54

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000388:	2100      	movs	r1, #0
 800038a:	4824      	ldr	r0, [pc, #144]	; (800041c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800038c:	f000 fd9f 	bl	8000ece <HAL_DAC_Start>
	values[i]=rand();
 8000390:	f002 fc5e 	bl	8002c50 <rand>
 8000394:	4602      	mov	r2, r0
 8000396:	4b22      	ldr	r3, [pc, #136]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4611      	mov	r1, r2
 800039c:	4a21      	ldr	r2, [pc, #132]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800039e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	//Uncomment this section to use values from the look up table
	//values[i]=sinev[i];

	// To create random values change sinev1[] to values[]
	if(i<1024)
 80003a2:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003aa:	d20e      	bcs.n	80003ca <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sinev1[i]);
 80003ac:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a1d      	ldr	r2, [pc, #116]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80003b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b6:	2200      	movs	r2, #0
 80003b8:	2100      	movs	r1, #0
 80003ba:	4818      	ldr	r0, [pc, #96]	; (800041c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80003bc:	f000 fe33 	bl	8001026 <HAL_DAC_SetValue>
	i++;
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	4a16      	ldr	r2, [pc, #88]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80003c8:	6013      	str	r3, [r2, #0]
	}

	if(i>=1023)
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d912      	bls.n	80003fc <HAL_TIM_PeriodElapsedCallback+0x7c>
	{i=1023;
 80003d6:	4b12      	ldr	r3, [pc, #72]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80003d8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80003dc:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sinev2[j]);
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a13      	ldr	r2, [pc, #76]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80003e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e8:	2200      	movs	r2, #0
 80003ea:	2100      	movs	r1, #0
 80003ec:	480b      	ldr	r0, [pc, #44]	; (800041c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80003ee:	f000 fe1a 	bl	8001026 <HAL_DAC_SetValue>
	j++;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	3301      	adds	r3, #1
 80003f8:	4a0c      	ldr	r2, [pc, #48]	; (800042c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80003fa:	6013      	str	r3, [r2, #0]
	}

	if(j>=1023)
 80003fc:	4b0b      	ldr	r3, [pc, #44]	; (800042c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000404:	4293      	cmp	r3, r2
 8000406:	d905      	bls.n	8000414 <HAL_TIM_PeriodElapsedCallback+0x94>
		{j=0;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
		i=0;
 800040e:	4b04      	ldr	r3, [pc, #16]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
		}

}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	200020a4 	.word	0x200020a4
 8000420:	20002090 	.word	0x20002090
 8000424:	200020b8 	.word	0x200020b8
 8000428:	20000000 	.word	0x20000000
 800042c:	20002094 	.word	0x20002094
 8000430:	20001000 	.word	0x20001000

08000434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000438:	f000 fb56 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043c:	f000 f80c 	bl	8000458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000440:	f000 f8ee 	bl	8000620 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000444:	f000 f884 	bl	8000550 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000448:	f000 f8b4 	bl	80005b4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800044c:	4801      	ldr	r0, [pc, #4]	; (8000454 <main+0x20>)
 800044e:	f002 f8d5 	bl	80025fc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000452:	e7fe      	b.n	8000452 <main+0x1e>
 8000454:	200040b8 	.word	0x200040b8

08000458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b09c      	sub	sp, #112	; 0x70
 800045c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000462:	224c      	movs	r2, #76	; 0x4c
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f002 fbea 	bl	8002c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2220      	movs	r2, #32
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fbe4 	bl	8002c40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000478:	2002      	movs	r0, #2
 800047a:	f001 f8ed 	bl	8001658 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800047e:	2300      	movs	r3, #0
 8000480:	603b      	str	r3, [r7, #0]
 8000482:	4b31      	ldr	r3, [pc, #196]	; (8000548 <SystemClock_Config+0xf0>)
 8000484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000486:	4a30      	ldr	r2, [pc, #192]	; (8000548 <SystemClock_Config+0xf0>)
 8000488:	f023 0301 	bic.w	r3, r3, #1
 800048c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800048e:	4b2e      	ldr	r3, [pc, #184]	; (8000548 <SystemClock_Config+0xf0>)
 8000490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	603b      	str	r3, [r7, #0]
 8000498:	4b2c      	ldr	r3, [pc, #176]	; (800054c <SystemClock_Config+0xf4>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a2b      	ldr	r2, [pc, #172]	; (800054c <SystemClock_Config+0xf4>)
 800049e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b29      	ldr	r3, [pc, #164]	; (800054c <SystemClock_Config+0xf4>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004b0:	bf00      	nop
 80004b2:	4b26      	ldr	r3, [pc, #152]	; (800054c <SystemClock_Config+0xf4>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004be:	d1f8      	bne.n	80004b2 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c0:	2302      	movs	r3, #2
 80004c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004c4:	2301      	movs	r3, #1
 80004c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c8:	2340      	movs	r3, #64	; 0x40
 80004ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004cc:	2302      	movs	r3, #2
 80004ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004d0:	2300      	movs	r3, #0
 80004d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80004d4:	2304      	movs	r3, #4
 80004d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80004d8:	230c      	movs	r3, #12
 80004da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004dc:	2302      	movs	r3, #2
 80004de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80004e0:	2304      	movs	r3, #4
 80004e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004e4:	2302      	movs	r3, #2
 80004e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004e8:	230c      	movs	r3, #12
 80004ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80004f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004fa:	4618      	mov	r0, r3
 80004fc:	f001 f8e6 	bl	80016cc <HAL_RCC_OscConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000506:	f000 f8a5 	bl	8000654 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050a:	233f      	movs	r3, #63	; 0x3f
 800050c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050e:	2303      	movs	r3, #3
 8000510:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f001 fcdc 	bl	8001eec <HAL_RCC_ClockConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800053a:	f000 f88b 	bl	8000654 <Error_Handler>
  }
}
 800053e:	bf00      	nop
 8000540:	3770      	adds	r7, #112	; 0x70
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	58000400 	.word	0x58000400
 800054c:	58024800 	.word	0x58024800

08000550 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2224      	movs	r2, #36	; 0x24
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f002 fb6f 	bl	8002c40 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_DAC1_Init+0x5c>)
 8000564:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <MX_DAC1_Init+0x60>)
 8000566:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000568:	4810      	ldr	r0, [pc, #64]	; (80005ac <MX_DAC1_Init+0x5c>)
 800056a:	f000 fc8e 	bl	8000e8a <HAL_DAC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000574:	f000 f86e 	bl	8000654 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800057c:	2316      	movs	r3, #22
 800057e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000584:	2301      	movs	r3, #1
 8000586:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	4619      	mov	r1, r3
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <MX_DAC1_Init+0x5c>)
 8000594:	f000 fd76 	bl	8001084 <HAL_DAC_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800059e:	f000 f859 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	3728      	adds	r7, #40	; 0x28
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200020a4 	.word	0x200020a4
 80005b0:	40007400 	.word	0x40007400

080005b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_TIM6_Init+0x64>)
 80005c6:	4a15      	ldr	r2, [pc, #84]	; (800061c <MX_TIM6_Init+0x68>)
 80005c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <MX_TIM6_Init+0x64>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_TIM6_Init+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_TIM6_Init+0x64>)
 80005d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_TIM6_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005e4:	480c      	ldr	r0, [pc, #48]	; (8000618 <MX_TIM6_Init+0x64>)
 80005e6:	f001 ffb1 	bl	800254c <HAL_TIM_Base_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80005f0:	f000 f830 	bl	8000654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005f4:	2320      	movs	r3, #32
 80005f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_TIM6_Init+0x64>)
 8000602:	f002 fa4d 	bl	8002aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800060c:	f000 f822 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200040b8 	.word	0x200040b8
 800061c:	40001000 	.word	0x40001000

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_GPIO_Init+0x30>)
 8000628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062c:	4a08      	ldr	r2, [pc, #32]	; (8000650 <MX_GPIO_Init+0x30>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_GPIO_Init+0x30>)
 8000638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	58024400 	.word	0x58024400

08000654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000658:	b672      	cpsid	i
}
 800065a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065c:	e7fe      	b.n	800065c <Error_Handler+0x8>
	...

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_MspInit+0x30>)
 8000668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800066c:	4a08      	ldr	r2, [pc, #32]	; (8000690 <HAL_MspInit+0x30>)
 800066e:	f043 0302 	orr.w	r3, r3, #2
 8000672:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_MspInit+0x30>)
 8000678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800067c:	f003 0302 	and.w	r3, r3, #2
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	58024400 	.word	0x58024400

08000694 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <HAL_DAC_MspInit+0x90>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d131      	bne.n	800071a <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <HAL_DAC_MspInit+0x94>)
 80006b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80006bc:	4a1a      	ldr	r2, [pc, #104]	; (8000728 <HAL_DAC_MspInit+0x94>)
 80006be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80006c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_DAC_MspInit+0x94>)
 80006c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80006cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HAL_DAC_MspInit+0x94>)
 80006d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006da:	4a13      	ldr	r2, [pc, #76]	; (8000728 <HAL_DAC_MspInit+0x94>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <HAL_DAC_MspInit+0x94>)
 80006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006f2:	2310      	movs	r3, #16
 80006f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <HAL_DAC_MspInit+0x98>)
 8000706:	f000 fdf7 	bl	80012f8 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	2036      	movs	r0, #54	; 0x36
 8000710:	f000 fb87 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000714:	2036      	movs	r0, #54	; 0x36
 8000716:	f000 fb9e 	bl	8000e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	; 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40007400 	.word	0x40007400
 8000728:	58024400 	.word	0x58024400
 800072c:	58020000 	.word	0x58020000

08000730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <HAL_TIM_Base_MspInit+0x48>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d116      	bne.n	8000770 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_TIM_Base_MspInit+0x4c>)
 8000744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <HAL_TIM_Base_MspInit+0x4c>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_TIM_Base_MspInit+0x4c>)
 8000754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000758:	f003 0310 	and.w	r3, r3, #16
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2100      	movs	r1, #0
 8000764:	2036      	movs	r0, #54	; 0x36
 8000766:	f000 fb5c 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800076a:	2036      	movs	r0, #54	; 0x36
 800076c:	f000 fb73 	bl	8000e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40001000 	.word	0x40001000
 800077c:	58024400 	.word	0x58024400

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <NMI_Handler+0x4>

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <MemManage_Handler+0x4>

08000792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>

0800079e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f9fe 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <TIM6_DAC_IRQHandler+0x14>)
 80007da:	f000 fbca 	bl	8000f72 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80007de:	4803      	ldr	r0, [pc, #12]	; (80007ec <TIM6_DAC_IRQHandler+0x18>)
 80007e0:	f001 ff7c 	bl	80026dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200020a4 	.word	0x200020a4
 80007ec:	200040b8 	.word	0x200040b8

080007f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
	return 1;
 80007f4:	2301      	movs	r3, #1
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <_kill>:

int _kill(int pid, int sig)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800080a:	f002 f9ef 	bl	8002bec <__errno>
 800080e:	4603      	mov	r3, r0
 8000810:	2216      	movs	r2, #22
 8000812:	601a      	str	r2, [r3, #0]
	return -1;
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <_exit>:

void _exit (int status)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000828:	f04f 31ff 	mov.w	r1, #4294967295
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ffe7 	bl	8000800 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000832:	e7fe      	b.n	8000832 <_exit+0x12>

08000834 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	e00a      	b.n	800085c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000846:	f3af 8000 	nop.w
 800084a:	4601      	mov	r1, r0
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	60ba      	str	r2, [r7, #8]
 8000852:	b2ca      	uxtb	r2, r1
 8000854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	3301      	adds	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	429a      	cmp	r2, r3
 8000862:	dbf0      	blt.n	8000846 <_read+0x12>
	}

return len;
 8000864:	687b      	ldr	r3, [r7, #4]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	e009      	b.n	8000894 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	60ba      	str	r2, [r7, #8]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	429a      	cmp	r2, r3
 800089a:	dbf1      	blt.n	8000880 <_write+0x12>
	}
	return len;
 800089c:	687b      	ldr	r3, [r7, #4]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <_close>:

int _close(int file)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
	return -1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ce:	605a      	str	r2, [r3, #4]
	return 0;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <_isatty>:

int _isatty(int file)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
	return 1;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
	return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <_sbrk+0x5c>)
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <_sbrk+0x60>)
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d102      	bne.n	8000932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <_sbrk+0x64>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <_sbrk+0x68>)
 8000930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	429a      	cmp	r2, r3
 800093e:	d207      	bcs.n	8000950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000940:	f002 f954 	bl	8002bec <__errno>
 8000944:	4603      	mov	r3, r0
 8000946:	220c      	movs	r2, #12
 8000948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	e009      	b.n	8000964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <_sbrk+0x64>)
 8000960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000962:	68fb      	ldr	r3, [r7, #12]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20020000 	.word	0x20020000
 8000970:	00000400 	.word	0x00000400
 8000974:	20002098 	.word	0x20002098
 8000978:	20004118 	.word	0x20004118

0800097c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000980:	4b39      	ldr	r3, [pc, #228]	; (8000a68 <SystemInit+0xec>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000986:	4a38      	ldr	r2, [pc, #224]	; (8000a68 <SystemInit+0xec>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000990:	4b36      	ldr	r3, [pc, #216]	; (8000a6c <SystemInit+0xf0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f003 030f 	and.w	r3, r3, #15
 8000998:	2b06      	cmp	r3, #6
 800099a:	d807      	bhi.n	80009ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800099c:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <SystemInit+0xf0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f023 030f 	bic.w	r3, r3, #15
 80009a4:	4a31      	ldr	r2, [pc, #196]	; (8000a6c <SystemInit+0xf0>)
 80009a6:	f043 0307 	orr.w	r3, r3, #7
 80009aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <SystemInit+0xf4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a2f      	ldr	r2, [pc, #188]	; (8000a70 <SystemInit+0xf4>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009b8:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <SystemInit+0xf4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009be:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <SystemInit+0xf4>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	492b      	ldr	r1, [pc, #172]	; (8000a70 <SystemInit+0xf4>)
 80009c4:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <SystemInit+0xf8>)
 80009c6:	4013      	ands	r3, r2
 80009c8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009ca:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <SystemInit+0xf0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d007      	beq.n	80009e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009d6:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <SystemInit+0xf0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f023 030f 	bic.w	r3, r3, #15
 80009de:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <SystemInit+0xf0>)
 80009e0:	f043 0307 	orr.w	r3, r3, #7
 80009e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <SystemInit+0xf4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <SystemInit+0xf4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <SystemInit+0xf4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <SystemInit+0xf4>)
 80009fa:	4a1f      	ldr	r2, [pc, #124]	; (8000a78 <SystemInit+0xfc>)
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <SystemInit+0xf4>)
 8000a00:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <SystemInit+0x100>)
 8000a02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <SystemInit+0xf4>)
 8000a06:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <SystemInit+0x104>)
 8000a08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <SystemInit+0xf4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <SystemInit+0xf4>)
 8000a12:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <SystemInit+0x104>)
 8000a14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <SystemInit+0xf4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <SystemInit+0xf4>)
 8000a1e:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <SystemInit+0x104>)
 8000a20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <SystemInit+0xf4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <SystemInit+0xf4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a10      	ldr	r2, [pc, #64]	; (8000a70 <SystemInit+0xf4>)
 8000a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <SystemInit+0xf4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <SystemInit+0x108>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <SystemInit+0x10c>)
 8000a40:	4013      	ands	r3, r2
 8000a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a46:	d202      	bcs.n	8000a4e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <SystemInit+0x110>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <SystemInit+0x114>)
 8000a50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a54:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a56:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <SystemInit+0xec>)
 8000a58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a5c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00
 8000a6c:	52002000 	.word	0x52002000
 8000a70:	58024400 	.word	0x58024400
 8000a74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a78:	02020200 	.word	0x02020200
 8000a7c:	01ff0000 	.word	0x01ff0000
 8000a80:	01010280 	.word	0x01010280
 8000a84:	5c001000 	.word	0x5c001000
 8000a88:	ffff0000 	.word	0xffff0000
 8000a8c:	51008108 	.word	0x51008108
 8000a90:	52004000 	.word	0x52004000

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a98:	f7ff ff70 	bl	800097c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	; (8000ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	; (8000ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f002 f899 	bl	8002bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fcb5 	bl	8000434 <main>
  bx  lr
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20002074 	.word	0x20002074
  ldr r2, =_sidata
 8000ad8:	08003dd0 	.word	0x08003dd0
  ldr r2, =_sbss
 8000adc:	20002074 	.word	0x20002074
  ldr r4, =_ebss
 8000ae0:	20004118 	.word	0x20004118

08000ae4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC3_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aee:	2003      	movs	r0, #3
 8000af0:	f000 f98c 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000af4:	f001 fbb0 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8000af8:	4602      	mov	r2, r0
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_Init+0x68>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	f003 030f 	and.w	r3, r3, #15
 8000b04:	4913      	ldr	r1, [pc, #76]	; (8000b54 <HAL_Init+0x6c>)
 8000b06:	5ccb      	ldrb	r3, [r1, r3]
 8000b08:	f003 031f 	and.w	r3, r3, #31
 8000b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_Init+0x68>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <HAL_Init+0x6c>)
 8000b1c:	5cd3      	ldrb	r3, [r2, r3]
 8000b1e:	f003 031f 	and.w	r3, r3, #31
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	fa22 f303 	lsr.w	r3, r2, r3
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <HAL_Init+0x70>)
 8000b2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <HAL_Init+0x74>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 f814 	bl	8000b60 <HAL_InitTick>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e002      	b.n	8000b48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b42:	f7ff fd8d 	bl	8000660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	58024400 	.word	0x58024400
 8000b54:	08003c6c 	.word	0x08003c6c
 8000b58:	20002004 	.word	0x20002004
 8000b5c:	20002000 	.word	0x20002000

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_InitTick+0x60>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e021      	b.n	8000bb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <HAL_InitTick+0x64>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_InitTick+0x60>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f971 	bl	8000e72 <HAL_SYSTICK_Config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00e      	b.n	8000bb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d80a      	bhi.n	8000bb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f000 f93b 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <HAL_InitTick+0x68>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000200c 	.word	0x2000200c
 8000bc4:	20002000 	.word	0x20002000
 8000bc8:	20002008 	.word	0x20002008

08000bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x20>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x24>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_IncTick+0x24>)
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	2000200c 	.word	0x2000200c
 8000bf0:	20004104 	.word	0x20004104

08000bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_GetTick+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20004104 	.word	0x20004104

08000c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c14:	f7ff ffee 	bl	8000bf4 <HAL_GetTick>
 8000c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c24:	d005      	beq.n	8000c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_Delay+0x44>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c32:	bf00      	nop
 8000c34:	f7ff ffde 	bl	8000bf4 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d8f7      	bhi.n	8000c34 <HAL_Delay+0x28>
  {
  }
}
 8000c44:	bf00      	nop
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000200c 	.word	0x2000200c

08000c54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetREVID+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	0c1b      	lsrs	r3, r3, #16
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	5c001000 	.word	0x5c001000

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <__NVIC_SetPriorityGrouping+0x40>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	4313      	orrs	r3, r2
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x40>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00
 8000cb0:	05fa0000 	.word	0x05fa0000

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	; (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff8e 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff29 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e30:	f7ff ff40 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000e34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	6978      	ldr	r0, [r7, #20]
 8000e3c:	f7ff ff90 	bl	8000d60 <NVIC_EncodePriority>
 8000e40:	4602      	mov	r2, r0
 8000e42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff5f 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff33 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffa4 	bl	8000dc8 <SysTick_Config>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e014      	b.n	8000ec6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	791b      	ldrb	r3, [r3, #4]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d105      	bne.n	8000eb2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff fbf1 	bl	8000694 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	795b      	ldrb	r3, [r3, #5]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d101      	bne.n	8000ee4 <HAL_DAC_Start+0x16>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	e040      	b.n	8000f66 <HAL_DAC_Start+0x98>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2202      	movs	r2, #2
 8000eee:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6819      	ldr	r1, [r3, #0]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	f003 0310 	and.w	r3, r3, #16
 8000efc:	2201      	movs	r2, #1
 8000efe:	409a      	lsls	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10f      	bne.n	8000f2e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d11d      	bne.n	8000f58 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 0201 	orr.w	r2, r2, #1
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	e014      	b.n	8000f58 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	2102      	movs	r1, #2
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d107      	bne.n	8000f58 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0202 	orr.w	r2, r2, #2
 8000f56:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f88:	d120      	bne.n	8000fcc <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f98:	d118      	bne.n	8000fcc <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	f043 0201 	orr.w	r2, r3, #1
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fc4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f852 	bl	8001070 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fda:	d120      	bne.n	800101e <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fea:	d118      	bne.n	800101e <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2204      	movs	r2, #4
 8000ff0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	f043 0202 	orr.w	r2, r3, #2
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001006:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001016:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 f963 	bl	80012e4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001026:	b480      	push	{r7}
 8001028:	b087      	sub	sp, #28
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d105      	bne.n	8001050 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	3308      	adds	r3, #8
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e004      	b.n	800105a <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	3314      	adds	r3, #20
 8001058:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	461a      	mov	r2, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	795b      	ldrb	r3, [r3, #5]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d101      	bne.n	800109c <HAL_DAC_ConfigChannel+0x18>
 8001098:	2302      	movs	r3, #2
 800109a:	e11d      	b.n	80012d8 <HAL_DAC_ConfigChannel+0x254>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2201      	movs	r2, #1
 80010a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2202      	movs	r2, #2
 80010a6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d174      	bne.n	800119a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80010b0:	f7ff fda0 	bl	8000bf4 <HAL_GetTick>
 80010b4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d134      	bne.n	8001126 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80010bc:	e011      	b.n	80010e2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80010be:	f7ff fd99 	bl	8000bf4 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d90a      	bls.n	80010e2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	f043 0208 	orr.w	r2, r3, #8
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2203      	movs	r2, #3
 80010dc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e0fa      	b.n	80012d8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e8:	4b7d      	ldr	r3, [pc, #500]	; (80012e0 <HAL_DAC_ConfigChannel+0x25c>)
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1e6      	bne.n	80010be <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff fd8b 	bl	8000c0c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	6992      	ldr	r2, [r2, #24]
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001100:	e01e      	b.n	8001140 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001102:	f7ff fd77 	bl	8000bf4 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b01      	cmp	r3, #1
 800110e:	d90a      	bls.n	8001126 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	f043 0208 	orr.w	r2, r3, #8
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2203      	movs	r2, #3
 8001120:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e0d8      	b.n	80012d8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112c:	2b00      	cmp	r3, #0
 800112e:	dbe8      	blt.n	8001102 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff fd6b 	bl	8000c0c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	6992      	ldr	r2, [r2, #24]
 800113e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	ea02 0103 	and.w	r1, r2, r3
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	69da      	ldr	r2, [r3, #28]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	409a      	lsls	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	21ff      	movs	r1, #255	; 0xff
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	ea02 0103 	and.w	r1, r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	6a1a      	ldr	r2, [r3, #32]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	409a      	lsls	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	430a      	orrs	r2, r1
 8001198:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d11d      	bne.n	80011de <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a8:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	221f      	movs	r2, #31
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	4013      	ands	r3, r2
 80011bc:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	2207      	movs	r2, #7
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	4013      	ands	r3, r2
 80011f8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d102      	bne.n	8001208 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	e00f      	b.n	8001228 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d102      	bne.n	8001216 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001210:	2301      	movs	r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	e008      	b.n	8001228 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800121e:	2301      	movs	r3, #1
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	e001      	b.n	8001228 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	4313      	orrs	r3, r2
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	4313      	orrs	r3, r2
 8001248:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6819      	ldr	r1, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	400a      	ands	r2, r1
 800126e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	4013      	ands	r3, r2
 800128c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0310 	and.w	r3, r3, #16
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6819      	ldr	r1, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	22c0      	movs	r2, #192	; 0xc0
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43da      	mvns	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	400a      	ands	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2201      	movs	r2, #1
 80012ce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20008000 	.word	0x20008000

080012e4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001306:	4b89      	ldr	r3, [pc, #548]	; (800152c <HAL_GPIO_Init+0x234>)
 8001308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800130a:	e194      	b.n	8001636 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8186 	beq.w	8001630 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d00b      	beq.n	8001344 <HAL_GPIO_Init+0x4c>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d007      	beq.n	8001344 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001338:	2b11      	cmp	r3, #17
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b12      	cmp	r3, #18
 8001342:	d130      	bne.n	80013a6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800137a:	2201      	movs	r2, #1
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	f003 0201 	and.w	r2, r3, #1
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	2203      	movs	r2, #3
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0xee>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b12      	cmp	r3, #18
 80013e4:	d123      	bne.n	800142e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	08da      	lsrs	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3208      	adds	r2, #8
 80013ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	220f      	movs	r2, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	691a      	ldr	r2, [r3, #16]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3208      	adds	r2, #8
 8001428:	69b9      	ldr	r1, [r7, #24]
 800142a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0203 	and.w	r2, r3, #3
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80e0 	beq.w	8001630 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001470:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <HAL_GPIO_Init+0x238>)
 8001472:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001476:	4a2e      	ldr	r2, [pc, #184]	; (8001530 <HAL_GPIO_Init+0x238>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_GPIO_Init+0x238>)
 8001482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148e:	4a29      	ldr	r2, [pc, #164]	; (8001534 <HAL_GPIO_Init+0x23c>)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	3302      	adds	r3, #2
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	220f      	movs	r2, #15
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a20      	ldr	r2, [pc, #128]	; (8001538 <HAL_GPIO_Init+0x240>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d052      	beq.n	8001560 <HAL_GPIO_Init+0x268>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a1f      	ldr	r2, [pc, #124]	; (800153c <HAL_GPIO_Init+0x244>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d031      	beq.n	8001526 <HAL_GPIO_Init+0x22e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a1e      	ldr	r2, [pc, #120]	; (8001540 <HAL_GPIO_Init+0x248>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d02b      	beq.n	8001522 <HAL_GPIO_Init+0x22a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <HAL_GPIO_Init+0x24c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d025      	beq.n	800151e <HAL_GPIO_Init+0x226>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <HAL_GPIO_Init+0x250>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d01f      	beq.n	800151a <HAL_GPIO_Init+0x222>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a1b      	ldr	r2, [pc, #108]	; (800154c <HAL_GPIO_Init+0x254>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d019      	beq.n	8001516 <HAL_GPIO_Init+0x21e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <HAL_GPIO_Init+0x258>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0x21a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a19      	ldr	r2, [pc, #100]	; (8001554 <HAL_GPIO_Init+0x25c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00d      	beq.n	800150e <HAL_GPIO_Init+0x216>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a18      	ldr	r2, [pc, #96]	; (8001558 <HAL_GPIO_Init+0x260>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d007      	beq.n	800150a <HAL_GPIO_Init+0x212>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a17      	ldr	r2, [pc, #92]	; (800155c <HAL_GPIO_Init+0x264>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d101      	bne.n	8001506 <HAL_GPIO_Init+0x20e>
 8001502:	2309      	movs	r3, #9
 8001504:	e02d      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001506:	230a      	movs	r3, #10
 8001508:	e02b      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800150a:	2308      	movs	r3, #8
 800150c:	e029      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800150e:	2307      	movs	r3, #7
 8001510:	e027      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001512:	2306      	movs	r3, #6
 8001514:	e025      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001516:	2305      	movs	r3, #5
 8001518:	e023      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800151a:	2304      	movs	r3, #4
 800151c:	e021      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800151e:	2303      	movs	r3, #3
 8001520:	e01f      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001522:	2302      	movs	r3, #2
 8001524:	e01d      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001526:	2301      	movs	r3, #1
 8001528:	e01b      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800152a:	bf00      	nop
 800152c:	58000080 	.word	0x58000080
 8001530:	58024400 	.word	0x58024400
 8001534:	58000400 	.word	0x58000400
 8001538:	58020000 	.word	0x58020000
 800153c:	58020400 	.word	0x58020400
 8001540:	58020800 	.word	0x58020800
 8001544:	58020c00 	.word	0x58020c00
 8001548:	58021000 	.word	0x58021000
 800154c:	58021400 	.word	0x58021400
 8001550:	58021800 	.word	0x58021800
 8001554:	58021c00 	.word	0x58021c00
 8001558:	58022000 	.word	0x58022000
 800155c:	58022400 	.word	0x58022400
 8001560:	2300      	movs	r3, #0
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	f002 0203 	and.w	r2, r2, #3
 8001568:	0092      	lsls	r2, r2, #2
 800156a:	4093      	lsls	r3, r2
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001572:	4938      	ldr	r1, [pc, #224]	; (8001654 <HAL_GPIO_Init+0x35c>)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001628:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	3301      	adds	r3, #1
 8001634:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	f47f ae63 	bne.w	800130c <HAL_GPIO_Init+0x14>
  }
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	3724      	adds	r7, #36	; 0x24
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	58000400 	.word	0x58000400

08001658 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_PWREx_ConfigSupply+0x70>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b04      	cmp	r3, #4
 800166a:	d00a      	beq.n	8001682 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_PWREx_ConfigSupply+0x70>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	429a      	cmp	r2, r3
 8001678:	d001      	beq.n	800167e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e01f      	b.n	80016be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e01d      	b.n	80016be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_PWREx_ConfigSupply+0x70>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	f023 0207 	bic.w	r2, r3, #7
 800168a:	490f      	ldr	r1, [pc, #60]	; (80016c8 <HAL_PWREx_ConfigSupply+0x70>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4313      	orrs	r3, r2
 8001690:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001692:	f7ff faaf 	bl	8000bf4 <HAL_GetTick>
 8001696:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001698:	e009      	b.n	80016ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800169a:	f7ff faab 	bl	8000bf4 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a8:	d901      	bls.n	80016ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e007      	b.n	80016be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_PWREx_ConfigSupply+0x70>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ba:	d1ee      	bne.n	800169a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	58024800 	.word	0x58024800

080016cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e3ff      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8087 	beq.w	80017fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ec:	4b99      	ldr	r3, [pc, #612]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016f6:	4b97      	ldr	r3, [pc, #604]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	2b10      	cmp	r3, #16
 8001700:	d007      	beq.n	8001712 <HAL_RCC_OscConfig+0x46>
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	2b18      	cmp	r3, #24
 8001706:	d110      	bne.n	800172a <HAL_RCC_OscConfig+0x5e>
 8001708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d10b      	bne.n	800172a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001712:	4b90      	ldr	r3, [pc, #576]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d06c      	beq.n	80017f8 <HAL_RCC_OscConfig+0x12c>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d168      	bne.n	80017f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e3d9      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001732:	d106      	bne.n	8001742 <HAL_RCC_OscConfig+0x76>
 8001734:	4b87      	ldr	r3, [pc, #540]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a86      	ldr	r2, [pc, #536]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 800173a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	e02e      	b.n	80017a0 <HAL_RCC_OscConfig+0xd4>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x98>
 800174a:	4b82      	ldr	r3, [pc, #520]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a81      	ldr	r2, [pc, #516]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b7f      	ldr	r3, [pc, #508]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a7e      	ldr	r2, [pc, #504]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 800175c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e01d      	b.n	80017a0 <HAL_RCC_OscConfig+0xd4>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0xbc>
 800176e:	4b79      	ldr	r3, [pc, #484]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a78      	ldr	r2, [pc, #480]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	4b76      	ldr	r3, [pc, #472]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a75      	ldr	r2, [pc, #468]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e00b      	b.n	80017a0 <HAL_RCC_OscConfig+0xd4>
 8001788:	4b72      	ldr	r3, [pc, #456]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a71      	ldr	r2, [pc, #452]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 800178e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b6f      	ldr	r3, [pc, #444]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a6e      	ldr	r2, [pc, #440]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 800179a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fa24 	bl	8000bf4 <HAL_GetTick>
 80017ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff fa20 	bl	8000bf4 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e38d      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017c2:	4b64      	ldr	r3, [pc, #400]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0xe4>
 80017ce:	e014      	b.n	80017fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fa10 	bl	8000bf4 <HAL_GetTick>
 80017d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fa0c 	bl	8000bf4 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e379      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017ea:	4b5a      	ldr	r3, [pc, #360]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x10c>
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 80ae 	beq.w	8001964 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001808:	4b52      	ldr	r3, [pc, #328]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001810:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001812:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <HAL_RCC_OscConfig+0x162>
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	2b18      	cmp	r3, #24
 8001822:	d13a      	bne.n	800189a <HAL_RCC_OscConfig+0x1ce>
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d135      	bne.n	800189a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800182e:	4b49      	ldr	r3, [pc, #292]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_RCC_OscConfig+0x17a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e34b      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001846:	f7ff fa05 	bl	8000c54 <HAL_GetREVID>
 800184a:	4603      	mov	r3, r0
 800184c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001850:	4293      	cmp	r3, r2
 8001852:	d817      	bhi.n	8001884 <HAL_RCC_OscConfig+0x1b8>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	2b40      	cmp	r3, #64	; 0x40
 800185a:	d108      	bne.n	800186e <HAL_RCC_OscConfig+0x1a2>
 800185c:	4b3d      	ldr	r3, [pc, #244]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001864:	4a3b      	ldr	r2, [pc, #236]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800186c:	e07a      	b.n	8001964 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186e:	4b39      	ldr	r3, [pc, #228]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	031b      	lsls	r3, r3, #12
 800187c:	4935      	ldr	r1, [pc, #212]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001882:	e06f      	b.n	8001964 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001884:	4b33      	ldr	r3, [pc, #204]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	061b      	lsls	r3, r3, #24
 8001892:	4930      	ldr	r1, [pc, #192]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001898:	e064      	b.n	8001964 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d045      	beq.n	800192e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018a2:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 0219 	bic.w	r2, r3, #25
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	4929      	ldr	r1, [pc, #164]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff f99e 	bl	8000bf4 <HAL_GetTick>
 80018b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018bc:	f7ff f99a 	bl	8000bf4 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e307      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	f7ff f9bb 	bl	8000c54 <HAL_GetREVID>
 80018de:	4603      	mov	r3, r0
 80018e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d817      	bhi.n	8001918 <HAL_RCC_OscConfig+0x24c>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	2b40      	cmp	r3, #64	; 0x40
 80018ee:	d108      	bne.n	8001902 <HAL_RCC_OscConfig+0x236>
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80018f8:	4a16      	ldr	r2, [pc, #88]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 80018fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fe:	6053      	str	r3, [r2, #4]
 8001900:	e030      	b.n	8001964 <HAL_RCC_OscConfig+0x298>
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	031b      	lsls	r3, r3, #12
 8001910:	4910      	ldr	r1, [pc, #64]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
 8001916:	e025      	b.n	8001964 <HAL_RCC_OscConfig+0x298>
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	490b      	ldr	r1, [pc, #44]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
 800192c:	e01a      	b.n	8001964 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_RCC_OscConfig+0x288>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff f95b 	bl	8000bf4 <HAL_GetTick>
 800193e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001940:	e00a      	b.n	8001958 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff f957 	bl	8000bf4 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d903      	bls.n	8001958 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e2c4      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
 8001954:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001958:	4ba4      	ldr	r3, [pc, #656]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ee      	bne.n	8001942 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0310 	and.w	r3, r3, #16
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a9 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001972:	4b9e      	ldr	r3, [pc, #632]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800197a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800197c:	4b9b      	ldr	r3, [pc, #620]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	2b08      	cmp	r3, #8
 8001986:	d007      	beq.n	8001998 <HAL_RCC_OscConfig+0x2cc>
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b18      	cmp	r3, #24
 800198c:	d13a      	bne.n	8001a04 <HAL_RCC_OscConfig+0x338>
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d135      	bne.n	8001a04 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001998:	4b94      	ldr	r3, [pc, #592]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_OscConfig+0x2e4>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	2b80      	cmp	r3, #128	; 0x80
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e296      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019b0:	f7ff f950 	bl	8000c54 <HAL_GetREVID>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d817      	bhi.n	80019ee <HAL_RCC_OscConfig+0x322>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	2b20      	cmp	r3, #32
 80019c4:	d108      	bne.n	80019d8 <HAL_RCC_OscConfig+0x30c>
 80019c6:	4b89      	ldr	r3, [pc, #548]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80019ce:	4a87      	ldr	r2, [pc, #540]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 80019d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019d6:	e075      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019d8:	4b84      	ldr	r3, [pc, #528]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	069b      	lsls	r3, r3, #26
 80019e6:	4981      	ldr	r1, [pc, #516]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019ec:	e06a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019ee:	4b7f      	ldr	r3, [pc, #508]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	061b      	lsls	r3, r3, #24
 80019fc:	497b      	ldr	r1, [pc, #492]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a02:	e05f      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d042      	beq.n	8001a92 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a0c:	4b77      	ldr	r3, [pc, #476]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a76      	ldr	r2, [pc, #472]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff f8ec 	bl	8000bf4 <HAL_GetTick>
 8001a1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a20:	f7ff f8e8 	bl	8000bf4 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e255      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a32:	4b6e      	ldr	r3, [pc, #440]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a3e:	f7ff f909 	bl	8000c54 <HAL_GetREVID>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d817      	bhi.n	8001a7c <HAL_RCC_OscConfig+0x3b0>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	2b20      	cmp	r3, #32
 8001a52:	d108      	bne.n	8001a66 <HAL_RCC_OscConfig+0x39a>
 8001a54:	4b65      	ldr	r3, [pc, #404]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a5c:	4a63      	ldr	r2, [pc, #396]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001a5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a62:	6053      	str	r3, [r2, #4]
 8001a64:	e02e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3f8>
 8001a66:	4b61      	ldr	r3, [pc, #388]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	069b      	lsls	r3, r3, #26
 8001a74:	495d      	ldr	r1, [pc, #372]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
 8001a7a:	e023      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3f8>
 8001a7c:	4b5b      	ldr	r3, [pc, #364]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	061b      	lsls	r3, r3, #24
 8001a8a:	4958      	ldr	r1, [pc, #352]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60cb      	str	r3, [r1, #12]
 8001a90:	e018      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a92:	4b56      	ldr	r3, [pc, #344]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a55      	ldr	r2, [pc, #340]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9e:	f7ff f8a9 	bl	8000bf4 <HAL_GetTick>
 8001aa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001aa6:	f7ff f8a5 	bl	8000bf4 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e212      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ab8:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d036      	beq.n	8001b3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d019      	beq.n	8001b0c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad8:	4b44      	ldr	r3, [pc, #272]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001adc:	4a43      	ldr	r2, [pc, #268]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f886 	bl	8000bf4 <HAL_GetTick>
 8001ae8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff f882 	bl	8000bf4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e1ef      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001afe:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x420>
 8001b0a:	e018      	b.n	8001b3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0c:	4b37      	ldr	r3, [pc, #220]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b10:	4a36      	ldr	r2, [pc, #216]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b18:	f7ff f86c 	bl	8000bf4 <HAL_GetTick>
 8001b1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b20:	f7ff f868 	bl	8000bf4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e1d5      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0320 	and.w	r3, r3, #32
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d036      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d019      	beq.n	8001b86 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a25      	ldr	r2, [pc, #148]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff f849 	bl	8000bf4 <HAL_GetTick>
 8001b62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b66:	f7ff f845 	bl	8000bf4 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e1b2      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b78:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x49a>
 8001b84:	e018      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a18      	ldr	r2, [pc, #96]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b92:	f7ff f82f 	bl	8000bf4 <HAL_GetTick>
 8001b96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b9a:	f7ff f82b 	bl	8000bf4 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e198      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_RCC_OscConfig+0x520>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8085 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_RCC_OscConfig+0x524>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_RCC_OscConfig+0x524>)
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bd2:	f7ff f80f 	bl	8000bf4 <HAL_GetTick>
 8001bd6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bd8:	e00c      	b.n	8001bf4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001bda:	f7ff f80b 	bl	8000bf4 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b64      	cmp	r3, #100	; 0x64
 8001be6:	d905      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e178      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
 8001bec:	58024400 	.word	0x58024400
 8001bf0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bf4:	4b96      	ldr	r3, [pc, #600]	; (8001e50 <HAL_RCC_OscConfig+0x784>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0ec      	beq.n	8001bda <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x54a>
 8001c08:	4b92      	ldr	r3, [pc, #584]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	4a91      	ldr	r2, [pc, #580]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6713      	str	r3, [r2, #112]	; 0x70
 8001c14:	e02d      	b.n	8001c72 <HAL_RCC_OscConfig+0x5a6>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x56c>
 8001c1e:	4b8d      	ldr	r3, [pc, #564]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c22:	4a8c      	ldr	r2, [pc, #560]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2a:	4b8a      	ldr	r3, [pc, #552]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2e:	4a89      	ldr	r2, [pc, #548]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c30:	f023 0304 	bic.w	r3, r3, #4
 8001c34:	6713      	str	r3, [r2, #112]	; 0x70
 8001c36:	e01c      	b.n	8001c72 <HAL_RCC_OscConfig+0x5a6>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d10c      	bne.n	8001c5a <HAL_RCC_OscConfig+0x58e>
 8001c40:	4b84      	ldr	r3, [pc, #528]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	4a83      	ldr	r2, [pc, #524]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4c:	4b81      	ldr	r3, [pc, #516]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	4a80      	ldr	r2, [pc, #512]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6713      	str	r3, [r2, #112]	; 0x70
 8001c58:	e00b      	b.n	8001c72 <HAL_RCC_OscConfig+0x5a6>
 8001c5a:	4b7e      	ldr	r3, [pc, #504]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	4a7d      	ldr	r2, [pc, #500]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	6713      	str	r3, [r2, #112]	; 0x70
 8001c66:	4b7b      	ldr	r3, [pc, #492]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6a:	4a7a      	ldr	r2, [pc, #488]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d015      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7a:	f7fe ffbb 	bl	8000bf4 <HAL_GetTick>
 8001c7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7fe ffb7 	bl	8000bf4 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e122      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c98:	4b6e      	ldr	r3, [pc, #440]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0ee      	beq.n	8001c82 <HAL_RCC_OscConfig+0x5b6>
 8001ca4:	e014      	b.n	8001cd0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca6:	f7fe ffa5 	bl	8000bf4 <HAL_GetTick>
 8001caa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7fe ffa1 	bl	8000bf4 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e10c      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cc4:	4b63      	ldr	r3, [pc, #396]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1ee      	bne.n	8001cae <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 8101 	beq.w	8001edc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001cda:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ce2:	2b18      	cmp	r3, #24
 8001ce4:	f000 80bc 	beq.w	8001e60 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	f040 8095 	bne.w	8001e1c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf2:	4b58      	ldr	r3, [pc, #352]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a57      	ldr	r2, [pc, #348]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001cf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7fe ff79 	bl	8000bf4 <HAL_GetTick>
 8001d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d06:	f7fe ff75 	bl	8000bf4 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e0e2      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d18:	4b4e      	ldr	r3, [pc, #312]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f0      	bne.n	8001d06 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d24:	4b4b      	ldr	r3, [pc, #300]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001d26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d28:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <HAL_RCC_OscConfig+0x78c>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	430a      	orrs	r2, r1
 8001d38:	4946      	ldr	r1, [pc, #280]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	628b      	str	r3, [r1, #40]	; 0x28
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	3b01      	subs	r3, #1
 8001d44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	025b      	lsls	r3, r3, #9
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	041b      	lsls	r3, r3, #16
 8001d5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d66:	3b01      	subs	r3, #1
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d6e:	4939      	ldr	r1, [pc, #228]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001d74:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	4a36      	ldr	r2, [pc, #216]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d80:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d84:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <HAL_RCC_OscConfig+0x790>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d8c:	00d2      	lsls	r2, r2, #3
 8001d8e:	4931      	ldr	r1, [pc, #196]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d94:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	f023 020c 	bic.w	r2, r3, #12
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	492c      	ldr	r1, [pc, #176]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001da6:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	f023 0202 	bic.w	r2, r3, #2
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4928      	ldr	r1, [pc, #160]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001db8:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	4a25      	ldr	r2, [pc, #148]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001dc4:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001dd0:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de8:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7fe fefe 	bl	8000bf4 <HAL_GetTick>
 8001df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7fe fefa 	bl	8000bf4 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e067      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x730>
 8001e1a:	e05f      	b.n	8001edc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7fe fee4 	bl	8000bf4 <HAL_GetTick>
 8001e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e30:	f7fe fee0 	bl	8000bf4 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e04d      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e42:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <HAL_RCC_OscConfig+0x788>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x764>
 8001e4e:	e045      	b.n	8001edc <HAL_RCC_OscConfig+0x810>
 8001e50:	58024800 	.word	0x58024800
 8001e54:	58024400 	.word	0x58024400
 8001e58:	fffffc0c 	.word	0xfffffc0c
 8001e5c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e60:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <HAL_RCC_OscConfig+0x81c>)
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_RCC_OscConfig+0x81c>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d031      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f003 0203 	and.w	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d12a      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d122      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d11a      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	0a5b      	lsrs	r3, r3, #9
 8001ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d111      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	0c1b      	lsrs	r3, r3, #16
 8001eb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d108      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	0e1b      	lsrs	r3, r3, #24
 8001eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3730      	adds	r7, #48	; 0x30
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	58024400 	.word	0x58024400

08001eec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e19c      	b.n	800223a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f00:	4b8a      	ldr	r3, [pc, #552]	; (800212c <HAL_RCC_ClockConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d910      	bls.n	8001f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b87      	ldr	r3, [pc, #540]	; (800212c <HAL_RCC_ClockConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 020f 	bic.w	r2, r3, #15
 8001f16:	4985      	ldr	r1, [pc, #532]	; (800212c <HAL_RCC_ClockConfig+0x240>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b83      	ldr	r3, [pc, #524]	; (800212c <HAL_RCC_ClockConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e184      	b.n	800223a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d010      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	4b7b      	ldr	r3, [pc, #492]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d908      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f4c:	4b78      	ldr	r3, [pc, #480]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	4975      	ldr	r1, [pc, #468]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d010      	beq.n	8001f8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	4b70      	ldr	r3, [pc, #448]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d908      	bls.n	8001f8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f7a:	4b6d      	ldr	r3, [pc, #436]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	496a      	ldr	r1, [pc, #424]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d010      	beq.n	8001fba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	4b64      	ldr	r3, [pc, #400]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d908      	bls.n	8001fba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fa8:	4b61      	ldr	r3, [pc, #388]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	495e      	ldr	r1, [pc, #376]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d010      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d908      	bls.n	8001fe8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001fd6:	4b56      	ldr	r3, [pc, #344]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4953      	ldr	r1, [pc, #332]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d010      	beq.n	8002016 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	4b4d      	ldr	r3, [pc, #308]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	429a      	cmp	r2, r3
 8002002:	d908      	bls.n	8002016 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002004:	4b4a      	ldr	r3, [pc, #296]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f023 020f 	bic.w	r2, r3, #15
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4947      	ldr	r1, [pc, #284]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8002012:	4313      	orrs	r3, r2
 8002014:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d055      	beq.n	80020ce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002022:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	4940      	ldr	r1, [pc, #256]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8002030:	4313      	orrs	r3, r2
 8002032:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d107      	bne.n	800204c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800203c:	4b3c      	ldr	r3, [pc, #240]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d121      	bne.n	800208c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0f6      	b.n	800223a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d107      	bne.n	8002064 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002054:	4b36      	ldr	r3, [pc, #216]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d115      	bne.n	800208c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0ea      	b.n	800223a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800206c:	4b30      	ldr	r3, [pc, #192]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0de      	b.n	800223a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800207c:	4b2c      	ldr	r3, [pc, #176]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0d6      	b.n	800223a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800208c:	4b28      	ldr	r3, [pc, #160]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f023 0207 	bic.w	r2, r3, #7
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4925      	ldr	r1, [pc, #148]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 800209a:	4313      	orrs	r3, r2
 800209c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209e:	f7fe fda9 	bl	8000bf4 <HAL_GetTick>
 80020a2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a6:	f7fe fda5 	bl	8000bf4 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0be      	b.n	800223a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020bc:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d1eb      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d010      	beq.n	80020fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d208      	bcs.n	80020fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f023 020f 	bic.w	r2, r3, #15
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	490e      	ldr	r1, [pc, #56]	; (8002130 <HAL_RCC_ClockConfig+0x244>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_ClockConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d214      	bcs.n	8002134 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_RCC_ClockConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 020f 	bic.w	r2, r3, #15
 8002112:	4906      	ldr	r1, [pc, #24]	; (800212c <HAL_RCC_ClockConfig+0x240>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <HAL_RCC_ClockConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e086      	b.n	800223a <HAL_RCC_ClockConfig+0x34e>
 800212c:	52002000 	.word	0x52002000
 8002130:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d010      	beq.n	8002162 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	4b3f      	ldr	r3, [pc, #252]	; (8002244 <HAL_RCC_ClockConfig+0x358>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800214c:	429a      	cmp	r2, r3
 800214e:	d208      	bcs.n	8002162 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002150:	4b3c      	ldr	r3, [pc, #240]	; (8002244 <HAL_RCC_ClockConfig+0x358>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	4939      	ldr	r1, [pc, #228]	; (8002244 <HAL_RCC_ClockConfig+0x358>)
 800215e:	4313      	orrs	r3, r2
 8002160:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d010      	beq.n	8002190 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	4b34      	ldr	r3, [pc, #208]	; (8002244 <HAL_RCC_ClockConfig+0x358>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800217a:	429a      	cmp	r2, r3
 800217c:	d208      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800217e:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_RCC_ClockConfig+0x358>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	492e      	ldr	r1, [pc, #184]	; (8002244 <HAL_RCC_ClockConfig+0x358>)
 800218c:	4313      	orrs	r3, r2
 800218e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b00      	cmp	r3, #0
 800219a:	d010      	beq.n	80021be <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	4b28      	ldr	r3, [pc, #160]	; (8002244 <HAL_RCC_ClockConfig+0x358>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d208      	bcs.n	80021be <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021ac:	4b25      	ldr	r3, [pc, #148]	; (8002244 <HAL_RCC_ClockConfig+0x358>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4922      	ldr	r1, [pc, #136]	; (8002244 <HAL_RCC_ClockConfig+0x358>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d010      	beq.n	80021ec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_RCC_ClockConfig+0x358>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d208      	bcs.n	80021ec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_RCC_ClockConfig+0x358>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4917      	ldr	r1, [pc, #92]	; (8002244 <HAL_RCC_ClockConfig+0x358>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021ec:	f000 f834 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <HAL_RCC_ClockConfig+0x358>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	4912      	ldr	r1, [pc, #72]	; (8002248 <HAL_RCC_ClockConfig+0x35c>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
 8002208:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <HAL_RCC_ClockConfig+0x358>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <HAL_RCC_ClockConfig+0x35c>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
 8002220:	4a0a      	ldr	r2, [pc, #40]	; (800224c <HAL_RCC_ClockConfig+0x360>)
 8002222:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002224:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_RCC_ClockConfig+0x364>)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_RCC_ClockConfig+0x368>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fc96 	bl	8000b60 <HAL_InitTick>
 8002234:	4603      	mov	r3, r0
 8002236:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	58024400 	.word	0x58024400
 8002248:	08003c6c 	.word	0x08003c6c
 800224c:	20002004 	.word	0x20002004
 8002250:	20002000 	.word	0x20002000
 8002254:	20002008 	.word	0x20002008

08002258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800225e:	4bb3      	ldr	r3, [pc, #716]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002266:	2b18      	cmp	r3, #24
 8002268:	f200 8155 	bhi.w	8002516 <HAL_RCC_GetSysClockFreq+0x2be>
 800226c:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <HAL_RCC_GetSysClockFreq+0x1c>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	080022d9 	.word	0x080022d9
 8002278:	08002517 	.word	0x08002517
 800227c:	08002517 	.word	0x08002517
 8002280:	08002517 	.word	0x08002517
 8002284:	08002517 	.word	0x08002517
 8002288:	08002517 	.word	0x08002517
 800228c:	08002517 	.word	0x08002517
 8002290:	08002517 	.word	0x08002517
 8002294:	080022ff 	.word	0x080022ff
 8002298:	08002517 	.word	0x08002517
 800229c:	08002517 	.word	0x08002517
 80022a0:	08002517 	.word	0x08002517
 80022a4:	08002517 	.word	0x08002517
 80022a8:	08002517 	.word	0x08002517
 80022ac:	08002517 	.word	0x08002517
 80022b0:	08002517 	.word	0x08002517
 80022b4:	08002305 	.word	0x08002305
 80022b8:	08002517 	.word	0x08002517
 80022bc:	08002517 	.word	0x08002517
 80022c0:	08002517 	.word	0x08002517
 80022c4:	08002517 	.word	0x08002517
 80022c8:	08002517 	.word	0x08002517
 80022cc:	08002517 	.word	0x08002517
 80022d0:	08002517 	.word	0x08002517
 80022d4:	0800230b 	.word	0x0800230b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022d8:	4b94      	ldr	r3, [pc, #592]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d009      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022e4:	4b91      	ldr	r3, [pc, #580]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	08db      	lsrs	r3, r3, #3
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	4a90      	ldr	r2, [pc, #576]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
 80022f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80022f6:	e111      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022f8:	4b8d      	ldr	r3, [pc, #564]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022fa:	61bb      	str	r3, [r7, #24]
    break;
 80022fc:	e10e      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80022fe:	4b8d      	ldr	r3, [pc, #564]	; (8002534 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002300:	61bb      	str	r3, [r7, #24]
    break;
 8002302:	e10b      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002304:	4b8c      	ldr	r3, [pc, #560]	; (8002538 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002306:	61bb      	str	r3, [r7, #24]
    break;
 8002308:	e108      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800230a:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002314:	4b85      	ldr	r3, [pc, #532]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800231e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002320:	4b82      	ldr	r3, [pc, #520]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800232a:	4b80      	ldr	r3, [pc, #512]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800232c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232e:	08db      	lsrs	r3, r3, #3
 8002330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002342:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80e1 	beq.w	8002510 <HAL_RCC_GetSysClockFreq+0x2b8>
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b02      	cmp	r3, #2
 8002352:	f000 8083 	beq.w	800245c <HAL_RCC_GetSysClockFreq+0x204>
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b02      	cmp	r3, #2
 800235a:	f200 80a1 	bhi.w	80024a0 <HAL_RCC_GetSysClockFreq+0x248>
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x114>
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d056      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x1c0>
 800236a:	e099      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800236c:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	2b00      	cmp	r3, #0
 8002376:	d02d      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002378:	4b6c      	ldr	r3, [pc, #432]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	08db      	lsrs	r3, r3, #3
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	4a6b      	ldr	r2, [pc, #428]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	ee07 3a90 	vmov	s15, r3
 800239a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a2:	4b62      	ldr	r3, [pc, #392]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800253c <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80023d2:	e087      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002540 <HAL_RCC_GetSysClockFreq+0x2e8>
 80023e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023e6:	4b51      	ldr	r3, [pc, #324]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800253c <HAL_RCC_GetSysClockFreq+0x2e4>
 80023fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800240a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800240e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002416:	e065      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002422:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002544 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800242a:	4b40      	ldr	r3, [pc, #256]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800243a:	ed97 6a02 	vldr	s12, [r7, #8]
 800243e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800253c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800244a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800244e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800245a:	e043      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	ee07 3a90 	vmov	s15, r3
 8002462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002466:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002548 <HAL_RCC_GetSysClockFreq+0x2f0>
 800246a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800246e:	4b2f      	ldr	r3, [pc, #188]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800247e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002482:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800253c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800248a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800248e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800249e:	e021      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002544 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800253c <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	0a5b      	lsrs	r3, r3, #9
 80024ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ee:	3301      	adds	r3, #1
 80024f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002508:	ee17 3a90 	vmov	r3, s15
 800250c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800250e:	e005      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	61bb      	str	r3, [r7, #24]
    break;
 8002514:	e002      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002518:	61bb      	str	r3, [r7, #24]
    break;
 800251a:	bf00      	nop
  }

  return sysclockfreq;
 800251c:	69bb      	ldr	r3, [r7, #24]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3724      	adds	r7, #36	; 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	58024400 	.word	0x58024400
 8002530:	03d09000 	.word	0x03d09000
 8002534:	003d0900 	.word	0x003d0900
 8002538:	007a1200 	.word	0x007a1200
 800253c:	46000000 	.word	0x46000000
 8002540:	4c742400 	.word	0x4c742400
 8002544:	4a742400 	.word	0x4a742400
 8002548:	4af42400 	.word	0x4af42400

0800254c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e049      	b.n	80025f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe f8dc 	bl	8000730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3304      	adds	r3, #4
 8002588:	4619      	mov	r1, r3
 800258a:	4610      	mov	r0, r2
 800258c:	f000 f9ee 	bl	800296c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d001      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e04f      	b.n	80026b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a23      	ldr	r2, [pc, #140]	; (80026c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01d      	beq.n	8002672 <HAL_TIM_Base_Start_IT+0x76>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263e:	d018      	beq.n	8002672 <HAL_TIM_Base_Start_IT+0x76>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1f      	ldr	r2, [pc, #124]	; (80026c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_TIM_Base_Start_IT+0x76>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00e      	beq.n	8002672 <HAL_TIM_Base_Start_IT+0x76>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <HAL_TIM_Base_Start_IT+0xd0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d009      	beq.n	8002672 <HAL_TIM_Base_Start_IT+0x76>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d004      	beq.n	8002672 <HAL_TIM_Base_Start_IT+0x76>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d115      	bne.n	800269e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800267a:	4013      	ands	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b06      	cmp	r3, #6
 8002682:	d015      	beq.n	80026b0 <HAL_TIM_Base_Start_IT+0xb4>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268a:	d011      	beq.n	80026b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269c:	e008      	b.n	80026b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e000      	b.n	80026b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	40010000 	.word	0x40010000
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40000800 	.word	0x40000800
 80026cc:	40000c00 	.word	0x40000c00
 80026d0:	40010400 	.word	0x40010400
 80026d4:	40001800 	.word	0x40001800
 80026d8:	00010007 	.word	0x00010007

080026dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d122      	bne.n	8002738 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d11b      	bne.n	8002738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0202 	mvn.w	r2, #2
 8002708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f905 	bl	800292e <HAL_TIM_IC_CaptureCallback>
 8002724:	e005      	b.n	8002732 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f8f7 	bl	800291a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f908 	bl	8002942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b04      	cmp	r3, #4
 8002744:	d122      	bne.n	800278c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b04      	cmp	r3, #4
 8002752:	d11b      	bne.n	800278c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0204 	mvn.w	r2, #4
 800275c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2202      	movs	r2, #2
 8002762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8db 	bl	800292e <HAL_TIM_IC_CaptureCallback>
 8002778:	e005      	b.n	8002786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8cd 	bl	800291a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f8de 	bl	8002942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b08      	cmp	r3, #8
 8002798:	d122      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d11b      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0208 	mvn.w	r2, #8
 80027b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2204      	movs	r2, #4
 80027b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8b1 	bl	800292e <HAL_TIM_IC_CaptureCallback>
 80027cc:	e005      	b.n	80027da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8a3 	bl	800291a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f8b4 	bl	8002942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d122      	bne.n	8002834 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	d11b      	bne.n	8002834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0210 	mvn.w	r2, #16
 8002804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2208      	movs	r2, #8
 800280a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f887 	bl	800292e <HAL_TIM_IC_CaptureCallback>
 8002820:	e005      	b.n	800282e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f879 	bl	800291a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f88a 	bl	8002942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b01      	cmp	r3, #1
 8002840:	d10e      	bne.n	8002860 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d107      	bne.n	8002860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0201 	mvn.w	r2, #1
 8002858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fd fd90 	bl	8000380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	2b80      	cmp	r3, #128	; 0x80
 800286c:	d10e      	bne.n	800288c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002878:	2b80      	cmp	r3, #128	; 0x80
 800287a:	d107      	bne.n	800288c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f99c 	bl	8002bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289a:	d10e      	bne.n	80028ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b80      	cmp	r3, #128	; 0x80
 80028a8:	d107      	bne.n	80028ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f98f 	bl	8002bd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d10e      	bne.n	80028e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d2:	2b40      	cmp	r3, #64	; 0x40
 80028d4:	d107      	bne.n	80028e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f838 	bl	8002956 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d10e      	bne.n	8002912 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b20      	cmp	r3, #32
 8002900:	d107      	bne.n	8002912 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f06f 0220 	mvn.w	r2, #32
 800290a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f94f 	bl	8002bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a40      	ldr	r2, [pc, #256]	; (8002a80 <TIM_Base_SetConfig+0x114>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d013      	beq.n	80029ac <TIM_Base_SetConfig+0x40>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298a:	d00f      	beq.n	80029ac <TIM_Base_SetConfig+0x40>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a3d      	ldr	r2, [pc, #244]	; (8002a84 <TIM_Base_SetConfig+0x118>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00b      	beq.n	80029ac <TIM_Base_SetConfig+0x40>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a3c      	ldr	r2, [pc, #240]	; (8002a88 <TIM_Base_SetConfig+0x11c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d007      	beq.n	80029ac <TIM_Base_SetConfig+0x40>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a3b      	ldr	r2, [pc, #236]	; (8002a8c <TIM_Base_SetConfig+0x120>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d003      	beq.n	80029ac <TIM_Base_SetConfig+0x40>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a3a      	ldr	r2, [pc, #232]	; (8002a90 <TIM_Base_SetConfig+0x124>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d108      	bne.n	80029be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a2f      	ldr	r2, [pc, #188]	; (8002a80 <TIM_Base_SetConfig+0x114>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d01f      	beq.n	8002a06 <TIM_Base_SetConfig+0x9a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029cc:	d01b      	beq.n	8002a06 <TIM_Base_SetConfig+0x9a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a2c      	ldr	r2, [pc, #176]	; (8002a84 <TIM_Base_SetConfig+0x118>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d017      	beq.n	8002a06 <TIM_Base_SetConfig+0x9a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a2b      	ldr	r2, [pc, #172]	; (8002a88 <TIM_Base_SetConfig+0x11c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <TIM_Base_SetConfig+0x9a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a2a      	ldr	r2, [pc, #168]	; (8002a8c <TIM_Base_SetConfig+0x120>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00f      	beq.n	8002a06 <TIM_Base_SetConfig+0x9a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a29      	ldr	r2, [pc, #164]	; (8002a90 <TIM_Base_SetConfig+0x124>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00b      	beq.n	8002a06 <TIM_Base_SetConfig+0x9a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a28      	ldr	r2, [pc, #160]	; (8002a94 <TIM_Base_SetConfig+0x128>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <TIM_Base_SetConfig+0x9a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <TIM_Base_SetConfig+0x12c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d003      	beq.n	8002a06 <TIM_Base_SetConfig+0x9a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a26      	ldr	r2, [pc, #152]	; (8002a9c <TIM_Base_SetConfig+0x130>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d108      	bne.n	8002a18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <TIM_Base_SetConfig+0x114>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00f      	beq.n	8002a64 <TIM_Base_SetConfig+0xf8>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <TIM_Base_SetConfig+0x124>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00b      	beq.n	8002a64 <TIM_Base_SetConfig+0xf8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <TIM_Base_SetConfig+0x128>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d007      	beq.n	8002a64 <TIM_Base_SetConfig+0xf8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <TIM_Base_SetConfig+0x12c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d003      	beq.n	8002a64 <TIM_Base_SetConfig+0xf8>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <TIM_Base_SetConfig+0x130>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d103      	bne.n	8002a6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	615a      	str	r2, [r3, #20]
}
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40010000 	.word	0x40010000
 8002a84:	40000400 	.word	0x40000400
 8002a88:	40000800 	.word	0x40000800
 8002a8c:	40000c00 	.word	0x40000c00
 8002a90:	40010400 	.word	0x40010400
 8002a94:	40014000 	.word	0x40014000
 8002a98:	40014400 	.word	0x40014400
 8002a9c:	40014800 	.word	0x40014800

08002aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e068      	b.n	8002b8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2e      	ldr	r2, [pc, #184]	; (8002b98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d004      	beq.n	8002aec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2d      	ldr	r2, [pc, #180]	; (8002b9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d108      	bne.n	8002afe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002af2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1e      	ldr	r2, [pc, #120]	; (8002b98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01d      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2a:	d018      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00e      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d009      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d004      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a14      	ldr	r2, [pc, #80]	; (8002bac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d10c      	bne.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40010400 	.word	0x40010400
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800
 8002ba8:	40000c00 	.word	0x40000c00
 8002bac:	40001800 	.word	0x40001800

08002bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <__errno>:
 8002bec:	4b01      	ldr	r3, [pc, #4]	; (8002bf4 <__errno+0x8>)
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20002010 	.word	0x20002010

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	4d0d      	ldr	r5, [pc, #52]	; (8002c30 <__libc_init_array+0x38>)
 8002bfc:	4c0d      	ldr	r4, [pc, #52]	; (8002c34 <__libc_init_array+0x3c>)
 8002bfe:	1b64      	subs	r4, r4, r5
 8002c00:	10a4      	asrs	r4, r4, #2
 8002c02:	2600      	movs	r6, #0
 8002c04:	42a6      	cmp	r6, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	4d0b      	ldr	r5, [pc, #44]	; (8002c38 <__libc_init_array+0x40>)
 8002c0a:	4c0c      	ldr	r4, [pc, #48]	; (8002c3c <__libc_init_array+0x44>)
 8002c0c:	f001 f822 	bl	8003c54 <_init>
 8002c10:	1b64      	subs	r4, r4, r5
 8002c12:	10a4      	asrs	r4, r4, #2
 8002c14:	2600      	movs	r6, #0
 8002c16:	42a6      	cmp	r6, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c20:	4798      	blx	r3
 8002c22:	3601      	adds	r6, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2a:	4798      	blx	r3
 8002c2c:	3601      	adds	r6, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	08003dc8 	.word	0x08003dc8
 8002c34:	08003dc8 	.word	0x08003dc8
 8002c38:	08003dc8 	.word	0x08003dc8
 8002c3c:	08003dcc 	.word	0x08003dcc

08002c40 <memset>:
 8002c40:	4402      	add	r2, r0
 8002c42:	4603      	mov	r3, r0
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d100      	bne.n	8002c4a <memset+0xa>
 8002c48:	4770      	bx	lr
 8002c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4e:	e7f9      	b.n	8002c44 <memset+0x4>

08002c50 <rand>:
 8002c50:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <rand+0x60>)
 8002c52:	b510      	push	{r4, lr}
 8002c54:	681c      	ldr	r4, [r3, #0]
 8002c56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c58:	b9b3      	cbnz	r3, 8002c88 <rand+0x38>
 8002c5a:	2018      	movs	r0, #24
 8002c5c:	f000 f868 	bl	8002d30 <malloc>
 8002c60:	63a0      	str	r0, [r4, #56]	; 0x38
 8002c62:	b928      	cbnz	r0, 8002c70 <rand+0x20>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <rand+0x64>)
 8002c68:	4813      	ldr	r0, [pc, #76]	; (8002cb8 <rand+0x68>)
 8002c6a:	214e      	movs	r1, #78	; 0x4e
 8002c6c:	f000 f830 	bl	8002cd0 <__assert_func>
 8002c70:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <rand+0x6c>)
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <rand+0x70>)
 8002c74:	e9c0 2300 	strd	r2, r3, [r0]
 8002c78:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <rand+0x74>)
 8002c7a:	6083      	str	r3, [r0, #8]
 8002c7c:	230b      	movs	r3, #11
 8002c7e:	8183      	strh	r3, [r0, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	2300      	movs	r3, #0
 8002c84:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002c88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002c8a:	480f      	ldr	r0, [pc, #60]	; (8002cc8 <rand+0x78>)
 8002c8c:	690a      	ldr	r2, [r1, #16]
 8002c8e:	694b      	ldr	r3, [r1, #20]
 8002c90:	4c0e      	ldr	r4, [pc, #56]	; (8002ccc <rand+0x7c>)
 8002c92:	4350      	muls	r0, r2
 8002c94:	fb04 0003 	mla	r0, r4, r3, r0
 8002c98:	fba2 3404 	umull	r3, r4, r2, r4
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	4404      	add	r4, r0
 8002ca0:	f144 0000 	adc.w	r0, r4, #0
 8002ca4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8002ca8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002cac:	bd10      	pop	{r4, pc}
 8002cae:	bf00      	nop
 8002cb0:	20002010 	.word	0x20002010
 8002cb4:	08003c80 	.word	0x08003c80
 8002cb8:	08003c97 	.word	0x08003c97
 8002cbc:	abcd330e 	.word	0xabcd330e
 8002cc0:	e66d1234 	.word	0xe66d1234
 8002cc4:	0005deec 	.word	0x0005deec
 8002cc8:	5851f42d 	.word	0x5851f42d
 8002ccc:	4c957f2d 	.word	0x4c957f2d

08002cd0 <__assert_func>:
 8002cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002cd2:	4614      	mov	r4, r2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <__assert_func+0x2c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4605      	mov	r5, r0
 8002cdc:	68d8      	ldr	r0, [r3, #12]
 8002cde:	b14c      	cbz	r4, 8002cf4 <__assert_func+0x24>
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <__assert_func+0x30>)
 8002ce2:	9100      	str	r1, [sp, #0]
 8002ce4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002ce8:	4906      	ldr	r1, [pc, #24]	; (8002d04 <__assert_func+0x34>)
 8002cea:	462b      	mov	r3, r5
 8002cec:	f000 f80e 	bl	8002d0c <fiprintf>
 8002cf0:	f000 fc8e 	bl	8003610 <abort>
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <__assert_func+0x38>)
 8002cf6:	461c      	mov	r4, r3
 8002cf8:	e7f3      	b.n	8002ce2 <__assert_func+0x12>
 8002cfa:	bf00      	nop
 8002cfc:	20002010 	.word	0x20002010
 8002d00:	08003cf6 	.word	0x08003cf6
 8002d04:	08003d03 	.word	0x08003d03
 8002d08:	08003d31 	.word	0x08003d31

08002d0c <fiprintf>:
 8002d0c:	b40e      	push	{r1, r2, r3}
 8002d0e:	b503      	push	{r0, r1, lr}
 8002d10:	4601      	mov	r1, r0
 8002d12:	ab03      	add	r3, sp, #12
 8002d14:	4805      	ldr	r0, [pc, #20]	; (8002d2c <fiprintf+0x20>)
 8002d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d1a:	6800      	ldr	r0, [r0, #0]
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	f000 f8e3 	bl	8002ee8 <_vfiprintf_r>
 8002d22:	b002      	add	sp, #8
 8002d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d28:	b003      	add	sp, #12
 8002d2a:	4770      	bx	lr
 8002d2c:	20002010 	.word	0x20002010

08002d30 <malloc>:
 8002d30:	4b02      	ldr	r3, [pc, #8]	; (8002d3c <malloc+0xc>)
 8002d32:	4601      	mov	r1, r0
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	f000 b853 	b.w	8002de0 <_malloc_r>
 8002d3a:	bf00      	nop
 8002d3c:	20002010 	.word	0x20002010

08002d40 <_free_r>:
 8002d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d42:	2900      	cmp	r1, #0
 8002d44:	d048      	beq.n	8002dd8 <_free_r+0x98>
 8002d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d4a:	9001      	str	r0, [sp, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8002d52:	bfb8      	it	lt
 8002d54:	18e4      	addlt	r4, r4, r3
 8002d56:	f000 fe81 	bl	8003a5c <__malloc_lock>
 8002d5a:	4a20      	ldr	r2, [pc, #128]	; (8002ddc <_free_r+0x9c>)
 8002d5c:	9801      	ldr	r0, [sp, #4]
 8002d5e:	6813      	ldr	r3, [r2, #0]
 8002d60:	4615      	mov	r5, r2
 8002d62:	b933      	cbnz	r3, 8002d72 <_free_r+0x32>
 8002d64:	6063      	str	r3, [r4, #4]
 8002d66:	6014      	str	r4, [r2, #0]
 8002d68:	b003      	add	sp, #12
 8002d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d6e:	f000 be7b 	b.w	8003a68 <__malloc_unlock>
 8002d72:	42a3      	cmp	r3, r4
 8002d74:	d90b      	bls.n	8002d8e <_free_r+0x4e>
 8002d76:	6821      	ldr	r1, [r4, #0]
 8002d78:	1862      	adds	r2, r4, r1
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	bf04      	itt	eq
 8002d7e:	681a      	ldreq	r2, [r3, #0]
 8002d80:	685b      	ldreq	r3, [r3, #4]
 8002d82:	6063      	str	r3, [r4, #4]
 8002d84:	bf04      	itt	eq
 8002d86:	1852      	addeq	r2, r2, r1
 8002d88:	6022      	streq	r2, [r4, #0]
 8002d8a:	602c      	str	r4, [r5, #0]
 8002d8c:	e7ec      	b.n	8002d68 <_free_r+0x28>
 8002d8e:	461a      	mov	r2, r3
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	b10b      	cbz	r3, 8002d98 <_free_r+0x58>
 8002d94:	42a3      	cmp	r3, r4
 8002d96:	d9fa      	bls.n	8002d8e <_free_r+0x4e>
 8002d98:	6811      	ldr	r1, [r2, #0]
 8002d9a:	1855      	adds	r5, r2, r1
 8002d9c:	42a5      	cmp	r5, r4
 8002d9e:	d10b      	bne.n	8002db8 <_free_r+0x78>
 8002da0:	6824      	ldr	r4, [r4, #0]
 8002da2:	4421      	add	r1, r4
 8002da4:	1854      	adds	r4, r2, r1
 8002da6:	42a3      	cmp	r3, r4
 8002da8:	6011      	str	r1, [r2, #0]
 8002daa:	d1dd      	bne.n	8002d68 <_free_r+0x28>
 8002dac:	681c      	ldr	r4, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	6053      	str	r3, [r2, #4]
 8002db2:	4421      	add	r1, r4
 8002db4:	6011      	str	r1, [r2, #0]
 8002db6:	e7d7      	b.n	8002d68 <_free_r+0x28>
 8002db8:	d902      	bls.n	8002dc0 <_free_r+0x80>
 8002dba:	230c      	movs	r3, #12
 8002dbc:	6003      	str	r3, [r0, #0]
 8002dbe:	e7d3      	b.n	8002d68 <_free_r+0x28>
 8002dc0:	6825      	ldr	r5, [r4, #0]
 8002dc2:	1961      	adds	r1, r4, r5
 8002dc4:	428b      	cmp	r3, r1
 8002dc6:	bf04      	itt	eq
 8002dc8:	6819      	ldreq	r1, [r3, #0]
 8002dca:	685b      	ldreq	r3, [r3, #4]
 8002dcc:	6063      	str	r3, [r4, #4]
 8002dce:	bf04      	itt	eq
 8002dd0:	1949      	addeq	r1, r1, r5
 8002dd2:	6021      	streq	r1, [r4, #0]
 8002dd4:	6054      	str	r4, [r2, #4]
 8002dd6:	e7c7      	b.n	8002d68 <_free_r+0x28>
 8002dd8:	b003      	add	sp, #12
 8002dda:	bd30      	pop	{r4, r5, pc}
 8002ddc:	2000209c 	.word	0x2000209c

08002de0 <_malloc_r>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	1ccd      	adds	r5, r1, #3
 8002de4:	f025 0503 	bic.w	r5, r5, #3
 8002de8:	3508      	adds	r5, #8
 8002dea:	2d0c      	cmp	r5, #12
 8002dec:	bf38      	it	cc
 8002dee:	250c      	movcc	r5, #12
 8002df0:	2d00      	cmp	r5, #0
 8002df2:	4606      	mov	r6, r0
 8002df4:	db01      	blt.n	8002dfa <_malloc_r+0x1a>
 8002df6:	42a9      	cmp	r1, r5
 8002df8:	d903      	bls.n	8002e02 <_malloc_r+0x22>
 8002dfa:	230c      	movs	r3, #12
 8002dfc:	6033      	str	r3, [r6, #0]
 8002dfe:	2000      	movs	r0, #0
 8002e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e02:	f000 fe2b 	bl	8003a5c <__malloc_lock>
 8002e06:	4921      	ldr	r1, [pc, #132]	; (8002e8c <_malloc_r+0xac>)
 8002e08:	680a      	ldr	r2, [r1, #0]
 8002e0a:	4614      	mov	r4, r2
 8002e0c:	b99c      	cbnz	r4, 8002e36 <_malloc_r+0x56>
 8002e0e:	4f20      	ldr	r7, [pc, #128]	; (8002e90 <_malloc_r+0xb0>)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	b923      	cbnz	r3, 8002e1e <_malloc_r+0x3e>
 8002e14:	4621      	mov	r1, r4
 8002e16:	4630      	mov	r0, r6
 8002e18:	f000 fb2a 	bl	8003470 <_sbrk_r>
 8002e1c:	6038      	str	r0, [r7, #0]
 8002e1e:	4629      	mov	r1, r5
 8002e20:	4630      	mov	r0, r6
 8002e22:	f000 fb25 	bl	8003470 <_sbrk_r>
 8002e26:	1c43      	adds	r3, r0, #1
 8002e28:	d123      	bne.n	8002e72 <_malloc_r+0x92>
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	6033      	str	r3, [r6, #0]
 8002e2e:	4630      	mov	r0, r6
 8002e30:	f000 fe1a 	bl	8003a68 <__malloc_unlock>
 8002e34:	e7e3      	b.n	8002dfe <_malloc_r+0x1e>
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	1b5b      	subs	r3, r3, r5
 8002e3a:	d417      	bmi.n	8002e6c <_malloc_r+0x8c>
 8002e3c:	2b0b      	cmp	r3, #11
 8002e3e:	d903      	bls.n	8002e48 <_malloc_r+0x68>
 8002e40:	6023      	str	r3, [r4, #0]
 8002e42:	441c      	add	r4, r3
 8002e44:	6025      	str	r5, [r4, #0]
 8002e46:	e004      	b.n	8002e52 <_malloc_r+0x72>
 8002e48:	6863      	ldr	r3, [r4, #4]
 8002e4a:	42a2      	cmp	r2, r4
 8002e4c:	bf0c      	ite	eq
 8002e4e:	600b      	streq	r3, [r1, #0]
 8002e50:	6053      	strne	r3, [r2, #4]
 8002e52:	4630      	mov	r0, r6
 8002e54:	f000 fe08 	bl	8003a68 <__malloc_unlock>
 8002e58:	f104 000b 	add.w	r0, r4, #11
 8002e5c:	1d23      	adds	r3, r4, #4
 8002e5e:	f020 0007 	bic.w	r0, r0, #7
 8002e62:	1ac2      	subs	r2, r0, r3
 8002e64:	d0cc      	beq.n	8002e00 <_malloc_r+0x20>
 8002e66:	1a1b      	subs	r3, r3, r0
 8002e68:	50a3      	str	r3, [r4, r2]
 8002e6a:	e7c9      	b.n	8002e00 <_malloc_r+0x20>
 8002e6c:	4622      	mov	r2, r4
 8002e6e:	6864      	ldr	r4, [r4, #4]
 8002e70:	e7cc      	b.n	8002e0c <_malloc_r+0x2c>
 8002e72:	1cc4      	adds	r4, r0, #3
 8002e74:	f024 0403 	bic.w	r4, r4, #3
 8002e78:	42a0      	cmp	r0, r4
 8002e7a:	d0e3      	beq.n	8002e44 <_malloc_r+0x64>
 8002e7c:	1a21      	subs	r1, r4, r0
 8002e7e:	4630      	mov	r0, r6
 8002e80:	f000 faf6 	bl	8003470 <_sbrk_r>
 8002e84:	3001      	adds	r0, #1
 8002e86:	d1dd      	bne.n	8002e44 <_malloc_r+0x64>
 8002e88:	e7cf      	b.n	8002e2a <_malloc_r+0x4a>
 8002e8a:	bf00      	nop
 8002e8c:	2000209c 	.word	0x2000209c
 8002e90:	200020a0 	.word	0x200020a0

08002e94 <__sfputc_r>:
 8002e94:	6893      	ldr	r3, [r2, #8]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	b410      	push	{r4}
 8002e9c:	6093      	str	r3, [r2, #8]
 8002e9e:	da08      	bge.n	8002eb2 <__sfputc_r+0x1e>
 8002ea0:	6994      	ldr	r4, [r2, #24]
 8002ea2:	42a3      	cmp	r3, r4
 8002ea4:	db01      	blt.n	8002eaa <__sfputc_r+0x16>
 8002ea6:	290a      	cmp	r1, #10
 8002ea8:	d103      	bne.n	8002eb2 <__sfputc_r+0x1e>
 8002eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002eae:	f000 baef 	b.w	8003490 <__swbuf_r>
 8002eb2:	6813      	ldr	r3, [r2, #0]
 8002eb4:	1c58      	adds	r0, r3, #1
 8002eb6:	6010      	str	r0, [r2, #0]
 8002eb8:	7019      	strb	r1, [r3, #0]
 8002eba:	4608      	mov	r0, r1
 8002ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <__sfputs_r>:
 8002ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec4:	4606      	mov	r6, r0
 8002ec6:	460f      	mov	r7, r1
 8002ec8:	4614      	mov	r4, r2
 8002eca:	18d5      	adds	r5, r2, r3
 8002ecc:	42ac      	cmp	r4, r5
 8002ece:	d101      	bne.n	8002ed4 <__sfputs_r+0x12>
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	e007      	b.n	8002ee4 <__sfputs_r+0x22>
 8002ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ed8:	463a      	mov	r2, r7
 8002eda:	4630      	mov	r0, r6
 8002edc:	f7ff ffda 	bl	8002e94 <__sfputc_r>
 8002ee0:	1c43      	adds	r3, r0, #1
 8002ee2:	d1f3      	bne.n	8002ecc <__sfputs_r+0xa>
 8002ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ee8 <_vfiprintf_r>:
 8002ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eec:	460d      	mov	r5, r1
 8002eee:	b09d      	sub	sp, #116	; 0x74
 8002ef0:	4614      	mov	r4, r2
 8002ef2:	4698      	mov	r8, r3
 8002ef4:	4606      	mov	r6, r0
 8002ef6:	b118      	cbz	r0, 8002f00 <_vfiprintf_r+0x18>
 8002ef8:	6983      	ldr	r3, [r0, #24]
 8002efa:	b90b      	cbnz	r3, 8002f00 <_vfiprintf_r+0x18>
 8002efc:	f000 fcaa 	bl	8003854 <__sinit>
 8002f00:	4b89      	ldr	r3, [pc, #548]	; (8003128 <_vfiprintf_r+0x240>)
 8002f02:	429d      	cmp	r5, r3
 8002f04:	d11b      	bne.n	8002f3e <_vfiprintf_r+0x56>
 8002f06:	6875      	ldr	r5, [r6, #4]
 8002f08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f0a:	07d9      	lsls	r1, r3, #31
 8002f0c:	d405      	bmi.n	8002f1a <_vfiprintf_r+0x32>
 8002f0e:	89ab      	ldrh	r3, [r5, #12]
 8002f10:	059a      	lsls	r2, r3, #22
 8002f12:	d402      	bmi.n	8002f1a <_vfiprintf_r+0x32>
 8002f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f16:	f000 fd3b 	bl	8003990 <__retarget_lock_acquire_recursive>
 8002f1a:	89ab      	ldrh	r3, [r5, #12]
 8002f1c:	071b      	lsls	r3, r3, #28
 8002f1e:	d501      	bpl.n	8002f24 <_vfiprintf_r+0x3c>
 8002f20:	692b      	ldr	r3, [r5, #16]
 8002f22:	b9eb      	cbnz	r3, 8002f60 <_vfiprintf_r+0x78>
 8002f24:	4629      	mov	r1, r5
 8002f26:	4630      	mov	r0, r6
 8002f28:	f000 fb04 	bl	8003534 <__swsetup_r>
 8002f2c:	b1c0      	cbz	r0, 8002f60 <_vfiprintf_r+0x78>
 8002f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f30:	07dc      	lsls	r4, r3, #31
 8002f32:	d50e      	bpl.n	8002f52 <_vfiprintf_r+0x6a>
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295
 8002f38:	b01d      	add	sp, #116	; 0x74
 8002f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f3e:	4b7b      	ldr	r3, [pc, #492]	; (800312c <_vfiprintf_r+0x244>)
 8002f40:	429d      	cmp	r5, r3
 8002f42:	d101      	bne.n	8002f48 <_vfiprintf_r+0x60>
 8002f44:	68b5      	ldr	r5, [r6, #8]
 8002f46:	e7df      	b.n	8002f08 <_vfiprintf_r+0x20>
 8002f48:	4b79      	ldr	r3, [pc, #484]	; (8003130 <_vfiprintf_r+0x248>)
 8002f4a:	429d      	cmp	r5, r3
 8002f4c:	bf08      	it	eq
 8002f4e:	68f5      	ldreq	r5, [r6, #12]
 8002f50:	e7da      	b.n	8002f08 <_vfiprintf_r+0x20>
 8002f52:	89ab      	ldrh	r3, [r5, #12]
 8002f54:	0598      	lsls	r0, r3, #22
 8002f56:	d4ed      	bmi.n	8002f34 <_vfiprintf_r+0x4c>
 8002f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f5a:	f000 fd1a 	bl	8003992 <__retarget_lock_release_recursive>
 8002f5e:	e7e9      	b.n	8002f34 <_vfiprintf_r+0x4c>
 8002f60:	2300      	movs	r3, #0
 8002f62:	9309      	str	r3, [sp, #36]	; 0x24
 8002f64:	2320      	movs	r3, #32
 8002f66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f6e:	2330      	movs	r3, #48	; 0x30
 8002f70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003134 <_vfiprintf_r+0x24c>
 8002f74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f78:	f04f 0901 	mov.w	r9, #1
 8002f7c:	4623      	mov	r3, r4
 8002f7e:	469a      	mov	sl, r3
 8002f80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f84:	b10a      	cbz	r2, 8002f8a <_vfiprintf_r+0xa2>
 8002f86:	2a25      	cmp	r2, #37	; 0x25
 8002f88:	d1f9      	bne.n	8002f7e <_vfiprintf_r+0x96>
 8002f8a:	ebba 0b04 	subs.w	fp, sl, r4
 8002f8e:	d00b      	beq.n	8002fa8 <_vfiprintf_r+0xc0>
 8002f90:	465b      	mov	r3, fp
 8002f92:	4622      	mov	r2, r4
 8002f94:	4629      	mov	r1, r5
 8002f96:	4630      	mov	r0, r6
 8002f98:	f7ff ff93 	bl	8002ec2 <__sfputs_r>
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	f000 80aa 	beq.w	80030f6 <_vfiprintf_r+0x20e>
 8002fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fa4:	445a      	add	r2, fp
 8002fa6:	9209      	str	r2, [sp, #36]	; 0x24
 8002fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80a2 	beq.w	80030f6 <_vfiprintf_r+0x20e>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fbc:	f10a 0a01 	add.w	sl, sl, #1
 8002fc0:	9304      	str	r3, [sp, #16]
 8002fc2:	9307      	str	r3, [sp, #28]
 8002fc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fc8:	931a      	str	r3, [sp, #104]	; 0x68
 8002fca:	4654      	mov	r4, sl
 8002fcc:	2205      	movs	r2, #5
 8002fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fd2:	4858      	ldr	r0, [pc, #352]	; (8003134 <_vfiprintf_r+0x24c>)
 8002fd4:	f7fd f984 	bl	80002e0 <memchr>
 8002fd8:	9a04      	ldr	r2, [sp, #16]
 8002fda:	b9d8      	cbnz	r0, 8003014 <_vfiprintf_r+0x12c>
 8002fdc:	06d1      	lsls	r1, r2, #27
 8002fde:	bf44      	itt	mi
 8002fe0:	2320      	movmi	r3, #32
 8002fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fe6:	0713      	lsls	r3, r2, #28
 8002fe8:	bf44      	itt	mi
 8002fea:	232b      	movmi	r3, #43	; 0x2b
 8002fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8002ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ff6:	d015      	beq.n	8003024 <_vfiprintf_r+0x13c>
 8002ff8:	9a07      	ldr	r2, [sp, #28]
 8002ffa:	4654      	mov	r4, sl
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f04f 0c0a 	mov.w	ip, #10
 8003002:	4621      	mov	r1, r4
 8003004:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003008:	3b30      	subs	r3, #48	; 0x30
 800300a:	2b09      	cmp	r3, #9
 800300c:	d94e      	bls.n	80030ac <_vfiprintf_r+0x1c4>
 800300e:	b1b0      	cbz	r0, 800303e <_vfiprintf_r+0x156>
 8003010:	9207      	str	r2, [sp, #28]
 8003012:	e014      	b.n	800303e <_vfiprintf_r+0x156>
 8003014:	eba0 0308 	sub.w	r3, r0, r8
 8003018:	fa09 f303 	lsl.w	r3, r9, r3
 800301c:	4313      	orrs	r3, r2
 800301e:	9304      	str	r3, [sp, #16]
 8003020:	46a2      	mov	sl, r4
 8003022:	e7d2      	b.n	8002fca <_vfiprintf_r+0xe2>
 8003024:	9b03      	ldr	r3, [sp, #12]
 8003026:	1d19      	adds	r1, r3, #4
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	9103      	str	r1, [sp, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	bfbb      	ittet	lt
 8003030:	425b      	neglt	r3, r3
 8003032:	f042 0202 	orrlt.w	r2, r2, #2
 8003036:	9307      	strge	r3, [sp, #28]
 8003038:	9307      	strlt	r3, [sp, #28]
 800303a:	bfb8      	it	lt
 800303c:	9204      	strlt	r2, [sp, #16]
 800303e:	7823      	ldrb	r3, [r4, #0]
 8003040:	2b2e      	cmp	r3, #46	; 0x2e
 8003042:	d10c      	bne.n	800305e <_vfiprintf_r+0x176>
 8003044:	7863      	ldrb	r3, [r4, #1]
 8003046:	2b2a      	cmp	r3, #42	; 0x2a
 8003048:	d135      	bne.n	80030b6 <_vfiprintf_r+0x1ce>
 800304a:	9b03      	ldr	r3, [sp, #12]
 800304c:	1d1a      	adds	r2, r3, #4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	9203      	str	r2, [sp, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	bfb8      	it	lt
 8003056:	f04f 33ff 	movlt.w	r3, #4294967295
 800305a:	3402      	adds	r4, #2
 800305c:	9305      	str	r3, [sp, #20]
 800305e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003144 <_vfiprintf_r+0x25c>
 8003062:	7821      	ldrb	r1, [r4, #0]
 8003064:	2203      	movs	r2, #3
 8003066:	4650      	mov	r0, sl
 8003068:	f7fd f93a 	bl	80002e0 <memchr>
 800306c:	b140      	cbz	r0, 8003080 <_vfiprintf_r+0x198>
 800306e:	2340      	movs	r3, #64	; 0x40
 8003070:	eba0 000a 	sub.w	r0, r0, sl
 8003074:	fa03 f000 	lsl.w	r0, r3, r0
 8003078:	9b04      	ldr	r3, [sp, #16]
 800307a:	4303      	orrs	r3, r0
 800307c:	3401      	adds	r4, #1
 800307e:	9304      	str	r3, [sp, #16]
 8003080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003084:	482c      	ldr	r0, [pc, #176]	; (8003138 <_vfiprintf_r+0x250>)
 8003086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800308a:	2206      	movs	r2, #6
 800308c:	f7fd f928 	bl	80002e0 <memchr>
 8003090:	2800      	cmp	r0, #0
 8003092:	d03f      	beq.n	8003114 <_vfiprintf_r+0x22c>
 8003094:	4b29      	ldr	r3, [pc, #164]	; (800313c <_vfiprintf_r+0x254>)
 8003096:	bb1b      	cbnz	r3, 80030e0 <_vfiprintf_r+0x1f8>
 8003098:	9b03      	ldr	r3, [sp, #12]
 800309a:	3307      	adds	r3, #7
 800309c:	f023 0307 	bic.w	r3, r3, #7
 80030a0:	3308      	adds	r3, #8
 80030a2:	9303      	str	r3, [sp, #12]
 80030a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030a6:	443b      	add	r3, r7
 80030a8:	9309      	str	r3, [sp, #36]	; 0x24
 80030aa:	e767      	b.n	8002f7c <_vfiprintf_r+0x94>
 80030ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80030b0:	460c      	mov	r4, r1
 80030b2:	2001      	movs	r0, #1
 80030b4:	e7a5      	b.n	8003002 <_vfiprintf_r+0x11a>
 80030b6:	2300      	movs	r3, #0
 80030b8:	3401      	adds	r4, #1
 80030ba:	9305      	str	r3, [sp, #20]
 80030bc:	4619      	mov	r1, r3
 80030be:	f04f 0c0a 	mov.w	ip, #10
 80030c2:	4620      	mov	r0, r4
 80030c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030c8:	3a30      	subs	r2, #48	; 0x30
 80030ca:	2a09      	cmp	r2, #9
 80030cc:	d903      	bls.n	80030d6 <_vfiprintf_r+0x1ee>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0c5      	beq.n	800305e <_vfiprintf_r+0x176>
 80030d2:	9105      	str	r1, [sp, #20]
 80030d4:	e7c3      	b.n	800305e <_vfiprintf_r+0x176>
 80030d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80030da:	4604      	mov	r4, r0
 80030dc:	2301      	movs	r3, #1
 80030de:	e7f0      	b.n	80030c2 <_vfiprintf_r+0x1da>
 80030e0:	ab03      	add	r3, sp, #12
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	462a      	mov	r2, r5
 80030e6:	4b16      	ldr	r3, [pc, #88]	; (8003140 <_vfiprintf_r+0x258>)
 80030e8:	a904      	add	r1, sp, #16
 80030ea:	4630      	mov	r0, r6
 80030ec:	f3af 8000 	nop.w
 80030f0:	4607      	mov	r7, r0
 80030f2:	1c78      	adds	r0, r7, #1
 80030f4:	d1d6      	bne.n	80030a4 <_vfiprintf_r+0x1bc>
 80030f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030f8:	07d9      	lsls	r1, r3, #31
 80030fa:	d405      	bmi.n	8003108 <_vfiprintf_r+0x220>
 80030fc:	89ab      	ldrh	r3, [r5, #12]
 80030fe:	059a      	lsls	r2, r3, #22
 8003100:	d402      	bmi.n	8003108 <_vfiprintf_r+0x220>
 8003102:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003104:	f000 fc45 	bl	8003992 <__retarget_lock_release_recursive>
 8003108:	89ab      	ldrh	r3, [r5, #12]
 800310a:	065b      	lsls	r3, r3, #25
 800310c:	f53f af12 	bmi.w	8002f34 <_vfiprintf_r+0x4c>
 8003110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003112:	e711      	b.n	8002f38 <_vfiprintf_r+0x50>
 8003114:	ab03      	add	r3, sp, #12
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	462a      	mov	r2, r5
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <_vfiprintf_r+0x258>)
 800311c:	a904      	add	r1, sp, #16
 800311e:	4630      	mov	r0, r6
 8003120:	f000 f880 	bl	8003224 <_printf_i>
 8003124:	e7e4      	b.n	80030f0 <_vfiprintf_r+0x208>
 8003126:	bf00      	nop
 8003128:	08003d88 	.word	0x08003d88
 800312c:	08003da8 	.word	0x08003da8
 8003130:	08003d68 	.word	0x08003d68
 8003134:	08003d32 	.word	0x08003d32
 8003138:	08003d3c 	.word	0x08003d3c
 800313c:	00000000 	.word	0x00000000
 8003140:	08002ec3 	.word	0x08002ec3
 8003144:	08003d38 	.word	0x08003d38

08003148 <_printf_common>:
 8003148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800314c:	4616      	mov	r6, r2
 800314e:	4699      	mov	r9, r3
 8003150:	688a      	ldr	r2, [r1, #8]
 8003152:	690b      	ldr	r3, [r1, #16]
 8003154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003158:	4293      	cmp	r3, r2
 800315a:	bfb8      	it	lt
 800315c:	4613      	movlt	r3, r2
 800315e:	6033      	str	r3, [r6, #0]
 8003160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003164:	4607      	mov	r7, r0
 8003166:	460c      	mov	r4, r1
 8003168:	b10a      	cbz	r2, 800316e <_printf_common+0x26>
 800316a:	3301      	adds	r3, #1
 800316c:	6033      	str	r3, [r6, #0]
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	0699      	lsls	r1, r3, #26
 8003172:	bf42      	ittt	mi
 8003174:	6833      	ldrmi	r3, [r6, #0]
 8003176:	3302      	addmi	r3, #2
 8003178:	6033      	strmi	r3, [r6, #0]
 800317a:	6825      	ldr	r5, [r4, #0]
 800317c:	f015 0506 	ands.w	r5, r5, #6
 8003180:	d106      	bne.n	8003190 <_printf_common+0x48>
 8003182:	f104 0a19 	add.w	sl, r4, #25
 8003186:	68e3      	ldr	r3, [r4, #12]
 8003188:	6832      	ldr	r2, [r6, #0]
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	42ab      	cmp	r3, r5
 800318e:	dc26      	bgt.n	80031de <_printf_common+0x96>
 8003190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003194:	1e13      	subs	r3, r2, #0
 8003196:	6822      	ldr	r2, [r4, #0]
 8003198:	bf18      	it	ne
 800319a:	2301      	movne	r3, #1
 800319c:	0692      	lsls	r2, r2, #26
 800319e:	d42b      	bmi.n	80031f8 <_printf_common+0xb0>
 80031a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031a4:	4649      	mov	r1, r9
 80031a6:	4638      	mov	r0, r7
 80031a8:	47c0      	blx	r8
 80031aa:	3001      	adds	r0, #1
 80031ac:	d01e      	beq.n	80031ec <_printf_common+0xa4>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	68e5      	ldr	r5, [r4, #12]
 80031b2:	6832      	ldr	r2, [r6, #0]
 80031b4:	f003 0306 	and.w	r3, r3, #6
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	bf08      	it	eq
 80031bc:	1aad      	subeq	r5, r5, r2
 80031be:	68a3      	ldr	r3, [r4, #8]
 80031c0:	6922      	ldr	r2, [r4, #16]
 80031c2:	bf0c      	ite	eq
 80031c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031c8:	2500      	movne	r5, #0
 80031ca:	4293      	cmp	r3, r2
 80031cc:	bfc4      	itt	gt
 80031ce:	1a9b      	subgt	r3, r3, r2
 80031d0:	18ed      	addgt	r5, r5, r3
 80031d2:	2600      	movs	r6, #0
 80031d4:	341a      	adds	r4, #26
 80031d6:	42b5      	cmp	r5, r6
 80031d8:	d11a      	bne.n	8003210 <_printf_common+0xc8>
 80031da:	2000      	movs	r0, #0
 80031dc:	e008      	b.n	80031f0 <_printf_common+0xa8>
 80031de:	2301      	movs	r3, #1
 80031e0:	4652      	mov	r2, sl
 80031e2:	4649      	mov	r1, r9
 80031e4:	4638      	mov	r0, r7
 80031e6:	47c0      	blx	r8
 80031e8:	3001      	adds	r0, #1
 80031ea:	d103      	bne.n	80031f4 <_printf_common+0xac>
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f4:	3501      	adds	r5, #1
 80031f6:	e7c6      	b.n	8003186 <_printf_common+0x3e>
 80031f8:	18e1      	adds	r1, r4, r3
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	2030      	movs	r0, #48	; 0x30
 80031fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003202:	4422      	add	r2, r4
 8003204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800320c:	3302      	adds	r3, #2
 800320e:	e7c7      	b.n	80031a0 <_printf_common+0x58>
 8003210:	2301      	movs	r3, #1
 8003212:	4622      	mov	r2, r4
 8003214:	4649      	mov	r1, r9
 8003216:	4638      	mov	r0, r7
 8003218:	47c0      	blx	r8
 800321a:	3001      	adds	r0, #1
 800321c:	d0e6      	beq.n	80031ec <_printf_common+0xa4>
 800321e:	3601      	adds	r6, #1
 8003220:	e7d9      	b.n	80031d6 <_printf_common+0x8e>
	...

08003224 <_printf_i>:
 8003224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003228:	460c      	mov	r4, r1
 800322a:	4691      	mov	r9, r2
 800322c:	7e27      	ldrb	r7, [r4, #24]
 800322e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003230:	2f78      	cmp	r7, #120	; 0x78
 8003232:	4680      	mov	r8, r0
 8003234:	469a      	mov	sl, r3
 8003236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800323a:	d807      	bhi.n	800324c <_printf_i+0x28>
 800323c:	2f62      	cmp	r7, #98	; 0x62
 800323e:	d80a      	bhi.n	8003256 <_printf_i+0x32>
 8003240:	2f00      	cmp	r7, #0
 8003242:	f000 80d8 	beq.w	80033f6 <_printf_i+0x1d2>
 8003246:	2f58      	cmp	r7, #88	; 0x58
 8003248:	f000 80a3 	beq.w	8003392 <_printf_i+0x16e>
 800324c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003254:	e03a      	b.n	80032cc <_printf_i+0xa8>
 8003256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800325a:	2b15      	cmp	r3, #21
 800325c:	d8f6      	bhi.n	800324c <_printf_i+0x28>
 800325e:	a001      	add	r0, pc, #4	; (adr r0, 8003264 <_printf_i+0x40>)
 8003260:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003264:	080032bd 	.word	0x080032bd
 8003268:	080032d1 	.word	0x080032d1
 800326c:	0800324d 	.word	0x0800324d
 8003270:	0800324d 	.word	0x0800324d
 8003274:	0800324d 	.word	0x0800324d
 8003278:	0800324d 	.word	0x0800324d
 800327c:	080032d1 	.word	0x080032d1
 8003280:	0800324d 	.word	0x0800324d
 8003284:	0800324d 	.word	0x0800324d
 8003288:	0800324d 	.word	0x0800324d
 800328c:	0800324d 	.word	0x0800324d
 8003290:	080033dd 	.word	0x080033dd
 8003294:	08003301 	.word	0x08003301
 8003298:	080033bf 	.word	0x080033bf
 800329c:	0800324d 	.word	0x0800324d
 80032a0:	0800324d 	.word	0x0800324d
 80032a4:	080033ff 	.word	0x080033ff
 80032a8:	0800324d 	.word	0x0800324d
 80032ac:	08003301 	.word	0x08003301
 80032b0:	0800324d 	.word	0x0800324d
 80032b4:	0800324d 	.word	0x0800324d
 80032b8:	080033c7 	.word	0x080033c7
 80032bc:	680b      	ldr	r3, [r1, #0]
 80032be:	1d1a      	adds	r2, r3, #4
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	600a      	str	r2, [r1, #0]
 80032c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80032c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0a3      	b.n	8003418 <_printf_i+0x1f4>
 80032d0:	6825      	ldr	r5, [r4, #0]
 80032d2:	6808      	ldr	r0, [r1, #0]
 80032d4:	062e      	lsls	r6, r5, #24
 80032d6:	f100 0304 	add.w	r3, r0, #4
 80032da:	d50a      	bpl.n	80032f2 <_printf_i+0xce>
 80032dc:	6805      	ldr	r5, [r0, #0]
 80032de:	600b      	str	r3, [r1, #0]
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	da03      	bge.n	80032ec <_printf_i+0xc8>
 80032e4:	232d      	movs	r3, #45	; 0x2d
 80032e6:	426d      	negs	r5, r5
 80032e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032ec:	485e      	ldr	r0, [pc, #376]	; (8003468 <_printf_i+0x244>)
 80032ee:	230a      	movs	r3, #10
 80032f0:	e019      	b.n	8003326 <_printf_i+0x102>
 80032f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80032f6:	6805      	ldr	r5, [r0, #0]
 80032f8:	600b      	str	r3, [r1, #0]
 80032fa:	bf18      	it	ne
 80032fc:	b22d      	sxthne	r5, r5
 80032fe:	e7ef      	b.n	80032e0 <_printf_i+0xbc>
 8003300:	680b      	ldr	r3, [r1, #0]
 8003302:	6825      	ldr	r5, [r4, #0]
 8003304:	1d18      	adds	r0, r3, #4
 8003306:	6008      	str	r0, [r1, #0]
 8003308:	0628      	lsls	r0, r5, #24
 800330a:	d501      	bpl.n	8003310 <_printf_i+0xec>
 800330c:	681d      	ldr	r5, [r3, #0]
 800330e:	e002      	b.n	8003316 <_printf_i+0xf2>
 8003310:	0669      	lsls	r1, r5, #25
 8003312:	d5fb      	bpl.n	800330c <_printf_i+0xe8>
 8003314:	881d      	ldrh	r5, [r3, #0]
 8003316:	4854      	ldr	r0, [pc, #336]	; (8003468 <_printf_i+0x244>)
 8003318:	2f6f      	cmp	r7, #111	; 0x6f
 800331a:	bf0c      	ite	eq
 800331c:	2308      	moveq	r3, #8
 800331e:	230a      	movne	r3, #10
 8003320:	2100      	movs	r1, #0
 8003322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003326:	6866      	ldr	r6, [r4, #4]
 8003328:	60a6      	str	r6, [r4, #8]
 800332a:	2e00      	cmp	r6, #0
 800332c:	bfa2      	ittt	ge
 800332e:	6821      	ldrge	r1, [r4, #0]
 8003330:	f021 0104 	bicge.w	r1, r1, #4
 8003334:	6021      	strge	r1, [r4, #0]
 8003336:	b90d      	cbnz	r5, 800333c <_printf_i+0x118>
 8003338:	2e00      	cmp	r6, #0
 800333a:	d04d      	beq.n	80033d8 <_printf_i+0x1b4>
 800333c:	4616      	mov	r6, r2
 800333e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003342:	fb03 5711 	mls	r7, r3, r1, r5
 8003346:	5dc7      	ldrb	r7, [r0, r7]
 8003348:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800334c:	462f      	mov	r7, r5
 800334e:	42bb      	cmp	r3, r7
 8003350:	460d      	mov	r5, r1
 8003352:	d9f4      	bls.n	800333e <_printf_i+0x11a>
 8003354:	2b08      	cmp	r3, #8
 8003356:	d10b      	bne.n	8003370 <_printf_i+0x14c>
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	07df      	lsls	r7, r3, #31
 800335c:	d508      	bpl.n	8003370 <_printf_i+0x14c>
 800335e:	6923      	ldr	r3, [r4, #16]
 8003360:	6861      	ldr	r1, [r4, #4]
 8003362:	4299      	cmp	r1, r3
 8003364:	bfde      	ittt	le
 8003366:	2330      	movle	r3, #48	; 0x30
 8003368:	f806 3c01 	strble.w	r3, [r6, #-1]
 800336c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003370:	1b92      	subs	r2, r2, r6
 8003372:	6122      	str	r2, [r4, #16]
 8003374:	f8cd a000 	str.w	sl, [sp]
 8003378:	464b      	mov	r3, r9
 800337a:	aa03      	add	r2, sp, #12
 800337c:	4621      	mov	r1, r4
 800337e:	4640      	mov	r0, r8
 8003380:	f7ff fee2 	bl	8003148 <_printf_common>
 8003384:	3001      	adds	r0, #1
 8003386:	d14c      	bne.n	8003422 <_printf_i+0x1fe>
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	b004      	add	sp, #16
 800338e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003392:	4835      	ldr	r0, [pc, #212]	; (8003468 <_printf_i+0x244>)
 8003394:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	680e      	ldr	r6, [r1, #0]
 800339c:	061f      	lsls	r7, r3, #24
 800339e:	f856 5b04 	ldr.w	r5, [r6], #4
 80033a2:	600e      	str	r6, [r1, #0]
 80033a4:	d514      	bpl.n	80033d0 <_printf_i+0x1ac>
 80033a6:	07d9      	lsls	r1, r3, #31
 80033a8:	bf44      	itt	mi
 80033aa:	f043 0320 	orrmi.w	r3, r3, #32
 80033ae:	6023      	strmi	r3, [r4, #0]
 80033b0:	b91d      	cbnz	r5, 80033ba <_printf_i+0x196>
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	f023 0320 	bic.w	r3, r3, #32
 80033b8:	6023      	str	r3, [r4, #0]
 80033ba:	2310      	movs	r3, #16
 80033bc:	e7b0      	b.n	8003320 <_printf_i+0xfc>
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	f043 0320 	orr.w	r3, r3, #32
 80033c4:	6023      	str	r3, [r4, #0]
 80033c6:	2378      	movs	r3, #120	; 0x78
 80033c8:	4828      	ldr	r0, [pc, #160]	; (800346c <_printf_i+0x248>)
 80033ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033ce:	e7e3      	b.n	8003398 <_printf_i+0x174>
 80033d0:	065e      	lsls	r6, r3, #25
 80033d2:	bf48      	it	mi
 80033d4:	b2ad      	uxthmi	r5, r5
 80033d6:	e7e6      	b.n	80033a6 <_printf_i+0x182>
 80033d8:	4616      	mov	r6, r2
 80033da:	e7bb      	b.n	8003354 <_printf_i+0x130>
 80033dc:	680b      	ldr	r3, [r1, #0]
 80033de:	6826      	ldr	r6, [r4, #0]
 80033e0:	6960      	ldr	r0, [r4, #20]
 80033e2:	1d1d      	adds	r5, r3, #4
 80033e4:	600d      	str	r5, [r1, #0]
 80033e6:	0635      	lsls	r5, r6, #24
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	d501      	bpl.n	80033f0 <_printf_i+0x1cc>
 80033ec:	6018      	str	r0, [r3, #0]
 80033ee:	e002      	b.n	80033f6 <_printf_i+0x1d2>
 80033f0:	0671      	lsls	r1, r6, #25
 80033f2:	d5fb      	bpl.n	80033ec <_printf_i+0x1c8>
 80033f4:	8018      	strh	r0, [r3, #0]
 80033f6:	2300      	movs	r3, #0
 80033f8:	6123      	str	r3, [r4, #16]
 80033fa:	4616      	mov	r6, r2
 80033fc:	e7ba      	b.n	8003374 <_printf_i+0x150>
 80033fe:	680b      	ldr	r3, [r1, #0]
 8003400:	1d1a      	adds	r2, r3, #4
 8003402:	600a      	str	r2, [r1, #0]
 8003404:	681e      	ldr	r6, [r3, #0]
 8003406:	6862      	ldr	r2, [r4, #4]
 8003408:	2100      	movs	r1, #0
 800340a:	4630      	mov	r0, r6
 800340c:	f7fc ff68 	bl	80002e0 <memchr>
 8003410:	b108      	cbz	r0, 8003416 <_printf_i+0x1f2>
 8003412:	1b80      	subs	r0, r0, r6
 8003414:	6060      	str	r0, [r4, #4]
 8003416:	6863      	ldr	r3, [r4, #4]
 8003418:	6123      	str	r3, [r4, #16]
 800341a:	2300      	movs	r3, #0
 800341c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003420:	e7a8      	b.n	8003374 <_printf_i+0x150>
 8003422:	6923      	ldr	r3, [r4, #16]
 8003424:	4632      	mov	r2, r6
 8003426:	4649      	mov	r1, r9
 8003428:	4640      	mov	r0, r8
 800342a:	47d0      	blx	sl
 800342c:	3001      	adds	r0, #1
 800342e:	d0ab      	beq.n	8003388 <_printf_i+0x164>
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	079b      	lsls	r3, r3, #30
 8003434:	d413      	bmi.n	800345e <_printf_i+0x23a>
 8003436:	68e0      	ldr	r0, [r4, #12]
 8003438:	9b03      	ldr	r3, [sp, #12]
 800343a:	4298      	cmp	r0, r3
 800343c:	bfb8      	it	lt
 800343e:	4618      	movlt	r0, r3
 8003440:	e7a4      	b.n	800338c <_printf_i+0x168>
 8003442:	2301      	movs	r3, #1
 8003444:	4632      	mov	r2, r6
 8003446:	4649      	mov	r1, r9
 8003448:	4640      	mov	r0, r8
 800344a:	47d0      	blx	sl
 800344c:	3001      	adds	r0, #1
 800344e:	d09b      	beq.n	8003388 <_printf_i+0x164>
 8003450:	3501      	adds	r5, #1
 8003452:	68e3      	ldr	r3, [r4, #12]
 8003454:	9903      	ldr	r1, [sp, #12]
 8003456:	1a5b      	subs	r3, r3, r1
 8003458:	42ab      	cmp	r3, r5
 800345a:	dcf2      	bgt.n	8003442 <_printf_i+0x21e>
 800345c:	e7eb      	b.n	8003436 <_printf_i+0x212>
 800345e:	2500      	movs	r5, #0
 8003460:	f104 0619 	add.w	r6, r4, #25
 8003464:	e7f5      	b.n	8003452 <_printf_i+0x22e>
 8003466:	bf00      	nop
 8003468:	08003d43 	.word	0x08003d43
 800346c:	08003d54 	.word	0x08003d54

08003470 <_sbrk_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	4d06      	ldr	r5, [pc, #24]	; (800348c <_sbrk_r+0x1c>)
 8003474:	2300      	movs	r3, #0
 8003476:	4604      	mov	r4, r0
 8003478:	4608      	mov	r0, r1
 800347a:	602b      	str	r3, [r5, #0]
 800347c:	f7fd fa48 	bl	8000910 <_sbrk>
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d102      	bne.n	800348a <_sbrk_r+0x1a>
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	b103      	cbz	r3, 800348a <_sbrk_r+0x1a>
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	bd38      	pop	{r3, r4, r5, pc}
 800348c:	20004114 	.word	0x20004114

08003490 <__swbuf_r>:
 8003490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003492:	460e      	mov	r6, r1
 8003494:	4614      	mov	r4, r2
 8003496:	4605      	mov	r5, r0
 8003498:	b118      	cbz	r0, 80034a2 <__swbuf_r+0x12>
 800349a:	6983      	ldr	r3, [r0, #24]
 800349c:	b90b      	cbnz	r3, 80034a2 <__swbuf_r+0x12>
 800349e:	f000 f9d9 	bl	8003854 <__sinit>
 80034a2:	4b21      	ldr	r3, [pc, #132]	; (8003528 <__swbuf_r+0x98>)
 80034a4:	429c      	cmp	r4, r3
 80034a6:	d12b      	bne.n	8003500 <__swbuf_r+0x70>
 80034a8:	686c      	ldr	r4, [r5, #4]
 80034aa:	69a3      	ldr	r3, [r4, #24]
 80034ac:	60a3      	str	r3, [r4, #8]
 80034ae:	89a3      	ldrh	r3, [r4, #12]
 80034b0:	071a      	lsls	r2, r3, #28
 80034b2:	d52f      	bpl.n	8003514 <__swbuf_r+0x84>
 80034b4:	6923      	ldr	r3, [r4, #16]
 80034b6:	b36b      	cbz	r3, 8003514 <__swbuf_r+0x84>
 80034b8:	6923      	ldr	r3, [r4, #16]
 80034ba:	6820      	ldr	r0, [r4, #0]
 80034bc:	1ac0      	subs	r0, r0, r3
 80034be:	6963      	ldr	r3, [r4, #20]
 80034c0:	b2f6      	uxtb	r6, r6
 80034c2:	4283      	cmp	r3, r0
 80034c4:	4637      	mov	r7, r6
 80034c6:	dc04      	bgt.n	80034d2 <__swbuf_r+0x42>
 80034c8:	4621      	mov	r1, r4
 80034ca:	4628      	mov	r0, r5
 80034cc:	f000 f92e 	bl	800372c <_fflush_r>
 80034d0:	bb30      	cbnz	r0, 8003520 <__swbuf_r+0x90>
 80034d2:	68a3      	ldr	r3, [r4, #8]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	60a3      	str	r3, [r4, #8]
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	6022      	str	r2, [r4, #0]
 80034de:	701e      	strb	r6, [r3, #0]
 80034e0:	6963      	ldr	r3, [r4, #20]
 80034e2:	3001      	adds	r0, #1
 80034e4:	4283      	cmp	r3, r0
 80034e6:	d004      	beq.n	80034f2 <__swbuf_r+0x62>
 80034e8:	89a3      	ldrh	r3, [r4, #12]
 80034ea:	07db      	lsls	r3, r3, #31
 80034ec:	d506      	bpl.n	80034fc <__swbuf_r+0x6c>
 80034ee:	2e0a      	cmp	r6, #10
 80034f0:	d104      	bne.n	80034fc <__swbuf_r+0x6c>
 80034f2:	4621      	mov	r1, r4
 80034f4:	4628      	mov	r0, r5
 80034f6:	f000 f919 	bl	800372c <_fflush_r>
 80034fa:	b988      	cbnz	r0, 8003520 <__swbuf_r+0x90>
 80034fc:	4638      	mov	r0, r7
 80034fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <__swbuf_r+0x9c>)
 8003502:	429c      	cmp	r4, r3
 8003504:	d101      	bne.n	800350a <__swbuf_r+0x7a>
 8003506:	68ac      	ldr	r4, [r5, #8]
 8003508:	e7cf      	b.n	80034aa <__swbuf_r+0x1a>
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <__swbuf_r+0xa0>)
 800350c:	429c      	cmp	r4, r3
 800350e:	bf08      	it	eq
 8003510:	68ec      	ldreq	r4, [r5, #12]
 8003512:	e7ca      	b.n	80034aa <__swbuf_r+0x1a>
 8003514:	4621      	mov	r1, r4
 8003516:	4628      	mov	r0, r5
 8003518:	f000 f80c 	bl	8003534 <__swsetup_r>
 800351c:	2800      	cmp	r0, #0
 800351e:	d0cb      	beq.n	80034b8 <__swbuf_r+0x28>
 8003520:	f04f 37ff 	mov.w	r7, #4294967295
 8003524:	e7ea      	b.n	80034fc <__swbuf_r+0x6c>
 8003526:	bf00      	nop
 8003528:	08003d88 	.word	0x08003d88
 800352c:	08003da8 	.word	0x08003da8
 8003530:	08003d68 	.word	0x08003d68

08003534 <__swsetup_r>:
 8003534:	4b32      	ldr	r3, [pc, #200]	; (8003600 <__swsetup_r+0xcc>)
 8003536:	b570      	push	{r4, r5, r6, lr}
 8003538:	681d      	ldr	r5, [r3, #0]
 800353a:	4606      	mov	r6, r0
 800353c:	460c      	mov	r4, r1
 800353e:	b125      	cbz	r5, 800354a <__swsetup_r+0x16>
 8003540:	69ab      	ldr	r3, [r5, #24]
 8003542:	b913      	cbnz	r3, 800354a <__swsetup_r+0x16>
 8003544:	4628      	mov	r0, r5
 8003546:	f000 f985 	bl	8003854 <__sinit>
 800354a:	4b2e      	ldr	r3, [pc, #184]	; (8003604 <__swsetup_r+0xd0>)
 800354c:	429c      	cmp	r4, r3
 800354e:	d10f      	bne.n	8003570 <__swsetup_r+0x3c>
 8003550:	686c      	ldr	r4, [r5, #4]
 8003552:	89a3      	ldrh	r3, [r4, #12]
 8003554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003558:	0719      	lsls	r1, r3, #28
 800355a:	d42c      	bmi.n	80035b6 <__swsetup_r+0x82>
 800355c:	06dd      	lsls	r5, r3, #27
 800355e:	d411      	bmi.n	8003584 <__swsetup_r+0x50>
 8003560:	2309      	movs	r3, #9
 8003562:	6033      	str	r3, [r6, #0]
 8003564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003568:	81a3      	strh	r3, [r4, #12]
 800356a:	f04f 30ff 	mov.w	r0, #4294967295
 800356e:	e03e      	b.n	80035ee <__swsetup_r+0xba>
 8003570:	4b25      	ldr	r3, [pc, #148]	; (8003608 <__swsetup_r+0xd4>)
 8003572:	429c      	cmp	r4, r3
 8003574:	d101      	bne.n	800357a <__swsetup_r+0x46>
 8003576:	68ac      	ldr	r4, [r5, #8]
 8003578:	e7eb      	b.n	8003552 <__swsetup_r+0x1e>
 800357a:	4b24      	ldr	r3, [pc, #144]	; (800360c <__swsetup_r+0xd8>)
 800357c:	429c      	cmp	r4, r3
 800357e:	bf08      	it	eq
 8003580:	68ec      	ldreq	r4, [r5, #12]
 8003582:	e7e6      	b.n	8003552 <__swsetup_r+0x1e>
 8003584:	0758      	lsls	r0, r3, #29
 8003586:	d512      	bpl.n	80035ae <__swsetup_r+0x7a>
 8003588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800358a:	b141      	cbz	r1, 800359e <__swsetup_r+0x6a>
 800358c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003590:	4299      	cmp	r1, r3
 8003592:	d002      	beq.n	800359a <__swsetup_r+0x66>
 8003594:	4630      	mov	r0, r6
 8003596:	f7ff fbd3 	bl	8002d40 <_free_r>
 800359a:	2300      	movs	r3, #0
 800359c:	6363      	str	r3, [r4, #52]	; 0x34
 800359e:	89a3      	ldrh	r3, [r4, #12]
 80035a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035a4:	81a3      	strh	r3, [r4, #12]
 80035a6:	2300      	movs	r3, #0
 80035a8:	6063      	str	r3, [r4, #4]
 80035aa:	6923      	ldr	r3, [r4, #16]
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	89a3      	ldrh	r3, [r4, #12]
 80035b0:	f043 0308 	orr.w	r3, r3, #8
 80035b4:	81a3      	strh	r3, [r4, #12]
 80035b6:	6923      	ldr	r3, [r4, #16]
 80035b8:	b94b      	cbnz	r3, 80035ce <__swsetup_r+0x9a>
 80035ba:	89a3      	ldrh	r3, [r4, #12]
 80035bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c4:	d003      	beq.n	80035ce <__swsetup_r+0x9a>
 80035c6:	4621      	mov	r1, r4
 80035c8:	4630      	mov	r0, r6
 80035ca:	f000 fa07 	bl	80039dc <__smakebuf_r>
 80035ce:	89a0      	ldrh	r0, [r4, #12]
 80035d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035d4:	f010 0301 	ands.w	r3, r0, #1
 80035d8:	d00a      	beq.n	80035f0 <__swsetup_r+0xbc>
 80035da:	2300      	movs	r3, #0
 80035dc:	60a3      	str	r3, [r4, #8]
 80035de:	6963      	ldr	r3, [r4, #20]
 80035e0:	425b      	negs	r3, r3
 80035e2:	61a3      	str	r3, [r4, #24]
 80035e4:	6923      	ldr	r3, [r4, #16]
 80035e6:	b943      	cbnz	r3, 80035fa <__swsetup_r+0xc6>
 80035e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80035ec:	d1ba      	bne.n	8003564 <__swsetup_r+0x30>
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
 80035f0:	0781      	lsls	r1, r0, #30
 80035f2:	bf58      	it	pl
 80035f4:	6963      	ldrpl	r3, [r4, #20]
 80035f6:	60a3      	str	r3, [r4, #8]
 80035f8:	e7f4      	b.n	80035e4 <__swsetup_r+0xb0>
 80035fa:	2000      	movs	r0, #0
 80035fc:	e7f7      	b.n	80035ee <__swsetup_r+0xba>
 80035fe:	bf00      	nop
 8003600:	20002010 	.word	0x20002010
 8003604:	08003d88 	.word	0x08003d88
 8003608:	08003da8 	.word	0x08003da8
 800360c:	08003d68 	.word	0x08003d68

08003610 <abort>:
 8003610:	b508      	push	{r3, lr}
 8003612:	2006      	movs	r0, #6
 8003614:	f000 fa56 	bl	8003ac4 <raise>
 8003618:	2001      	movs	r0, #1
 800361a:	f7fd f901 	bl	8000820 <_exit>
	...

08003620 <__sflush_r>:
 8003620:	898a      	ldrh	r2, [r1, #12]
 8003622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003626:	4605      	mov	r5, r0
 8003628:	0710      	lsls	r0, r2, #28
 800362a:	460c      	mov	r4, r1
 800362c:	d458      	bmi.n	80036e0 <__sflush_r+0xc0>
 800362e:	684b      	ldr	r3, [r1, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	dc05      	bgt.n	8003640 <__sflush_r+0x20>
 8003634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	dc02      	bgt.n	8003640 <__sflush_r+0x20>
 800363a:	2000      	movs	r0, #0
 800363c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003642:	2e00      	cmp	r6, #0
 8003644:	d0f9      	beq.n	800363a <__sflush_r+0x1a>
 8003646:	2300      	movs	r3, #0
 8003648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800364c:	682f      	ldr	r7, [r5, #0]
 800364e:	602b      	str	r3, [r5, #0]
 8003650:	d032      	beq.n	80036b8 <__sflush_r+0x98>
 8003652:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003654:	89a3      	ldrh	r3, [r4, #12]
 8003656:	075a      	lsls	r2, r3, #29
 8003658:	d505      	bpl.n	8003666 <__sflush_r+0x46>
 800365a:	6863      	ldr	r3, [r4, #4]
 800365c:	1ac0      	subs	r0, r0, r3
 800365e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003660:	b10b      	cbz	r3, 8003666 <__sflush_r+0x46>
 8003662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003664:	1ac0      	subs	r0, r0, r3
 8003666:	2300      	movs	r3, #0
 8003668:	4602      	mov	r2, r0
 800366a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800366c:	6a21      	ldr	r1, [r4, #32]
 800366e:	4628      	mov	r0, r5
 8003670:	47b0      	blx	r6
 8003672:	1c43      	adds	r3, r0, #1
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	d106      	bne.n	8003686 <__sflush_r+0x66>
 8003678:	6829      	ldr	r1, [r5, #0]
 800367a:	291d      	cmp	r1, #29
 800367c:	d82c      	bhi.n	80036d8 <__sflush_r+0xb8>
 800367e:	4a2a      	ldr	r2, [pc, #168]	; (8003728 <__sflush_r+0x108>)
 8003680:	40ca      	lsrs	r2, r1
 8003682:	07d6      	lsls	r6, r2, #31
 8003684:	d528      	bpl.n	80036d8 <__sflush_r+0xb8>
 8003686:	2200      	movs	r2, #0
 8003688:	6062      	str	r2, [r4, #4]
 800368a:	04d9      	lsls	r1, r3, #19
 800368c:	6922      	ldr	r2, [r4, #16]
 800368e:	6022      	str	r2, [r4, #0]
 8003690:	d504      	bpl.n	800369c <__sflush_r+0x7c>
 8003692:	1c42      	adds	r2, r0, #1
 8003694:	d101      	bne.n	800369a <__sflush_r+0x7a>
 8003696:	682b      	ldr	r3, [r5, #0]
 8003698:	b903      	cbnz	r3, 800369c <__sflush_r+0x7c>
 800369a:	6560      	str	r0, [r4, #84]	; 0x54
 800369c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800369e:	602f      	str	r7, [r5, #0]
 80036a0:	2900      	cmp	r1, #0
 80036a2:	d0ca      	beq.n	800363a <__sflush_r+0x1a>
 80036a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036a8:	4299      	cmp	r1, r3
 80036aa:	d002      	beq.n	80036b2 <__sflush_r+0x92>
 80036ac:	4628      	mov	r0, r5
 80036ae:	f7ff fb47 	bl	8002d40 <_free_r>
 80036b2:	2000      	movs	r0, #0
 80036b4:	6360      	str	r0, [r4, #52]	; 0x34
 80036b6:	e7c1      	b.n	800363c <__sflush_r+0x1c>
 80036b8:	6a21      	ldr	r1, [r4, #32]
 80036ba:	2301      	movs	r3, #1
 80036bc:	4628      	mov	r0, r5
 80036be:	47b0      	blx	r6
 80036c0:	1c41      	adds	r1, r0, #1
 80036c2:	d1c7      	bne.n	8003654 <__sflush_r+0x34>
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0c4      	beq.n	8003654 <__sflush_r+0x34>
 80036ca:	2b1d      	cmp	r3, #29
 80036cc:	d001      	beq.n	80036d2 <__sflush_r+0xb2>
 80036ce:	2b16      	cmp	r3, #22
 80036d0:	d101      	bne.n	80036d6 <__sflush_r+0xb6>
 80036d2:	602f      	str	r7, [r5, #0]
 80036d4:	e7b1      	b.n	800363a <__sflush_r+0x1a>
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036dc:	81a3      	strh	r3, [r4, #12]
 80036de:	e7ad      	b.n	800363c <__sflush_r+0x1c>
 80036e0:	690f      	ldr	r7, [r1, #16]
 80036e2:	2f00      	cmp	r7, #0
 80036e4:	d0a9      	beq.n	800363a <__sflush_r+0x1a>
 80036e6:	0793      	lsls	r3, r2, #30
 80036e8:	680e      	ldr	r6, [r1, #0]
 80036ea:	bf08      	it	eq
 80036ec:	694b      	ldreq	r3, [r1, #20]
 80036ee:	600f      	str	r7, [r1, #0]
 80036f0:	bf18      	it	ne
 80036f2:	2300      	movne	r3, #0
 80036f4:	eba6 0807 	sub.w	r8, r6, r7
 80036f8:	608b      	str	r3, [r1, #8]
 80036fa:	f1b8 0f00 	cmp.w	r8, #0
 80036fe:	dd9c      	ble.n	800363a <__sflush_r+0x1a>
 8003700:	6a21      	ldr	r1, [r4, #32]
 8003702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003704:	4643      	mov	r3, r8
 8003706:	463a      	mov	r2, r7
 8003708:	4628      	mov	r0, r5
 800370a:	47b0      	blx	r6
 800370c:	2800      	cmp	r0, #0
 800370e:	dc06      	bgt.n	800371e <__sflush_r+0xfe>
 8003710:	89a3      	ldrh	r3, [r4, #12]
 8003712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003716:	81a3      	strh	r3, [r4, #12]
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
 800371c:	e78e      	b.n	800363c <__sflush_r+0x1c>
 800371e:	4407      	add	r7, r0
 8003720:	eba8 0800 	sub.w	r8, r8, r0
 8003724:	e7e9      	b.n	80036fa <__sflush_r+0xda>
 8003726:	bf00      	nop
 8003728:	20400001 	.word	0x20400001

0800372c <_fflush_r>:
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	690b      	ldr	r3, [r1, #16]
 8003730:	4605      	mov	r5, r0
 8003732:	460c      	mov	r4, r1
 8003734:	b913      	cbnz	r3, 800373c <_fflush_r+0x10>
 8003736:	2500      	movs	r5, #0
 8003738:	4628      	mov	r0, r5
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	b118      	cbz	r0, 8003746 <_fflush_r+0x1a>
 800373e:	6983      	ldr	r3, [r0, #24]
 8003740:	b90b      	cbnz	r3, 8003746 <_fflush_r+0x1a>
 8003742:	f000 f887 	bl	8003854 <__sinit>
 8003746:	4b14      	ldr	r3, [pc, #80]	; (8003798 <_fflush_r+0x6c>)
 8003748:	429c      	cmp	r4, r3
 800374a:	d11b      	bne.n	8003784 <_fflush_r+0x58>
 800374c:	686c      	ldr	r4, [r5, #4]
 800374e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0ef      	beq.n	8003736 <_fflush_r+0xa>
 8003756:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003758:	07d0      	lsls	r0, r2, #31
 800375a:	d404      	bmi.n	8003766 <_fflush_r+0x3a>
 800375c:	0599      	lsls	r1, r3, #22
 800375e:	d402      	bmi.n	8003766 <_fflush_r+0x3a>
 8003760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003762:	f000 f915 	bl	8003990 <__retarget_lock_acquire_recursive>
 8003766:	4628      	mov	r0, r5
 8003768:	4621      	mov	r1, r4
 800376a:	f7ff ff59 	bl	8003620 <__sflush_r>
 800376e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003770:	07da      	lsls	r2, r3, #31
 8003772:	4605      	mov	r5, r0
 8003774:	d4e0      	bmi.n	8003738 <_fflush_r+0xc>
 8003776:	89a3      	ldrh	r3, [r4, #12]
 8003778:	059b      	lsls	r3, r3, #22
 800377a:	d4dd      	bmi.n	8003738 <_fflush_r+0xc>
 800377c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800377e:	f000 f908 	bl	8003992 <__retarget_lock_release_recursive>
 8003782:	e7d9      	b.n	8003738 <_fflush_r+0xc>
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <_fflush_r+0x70>)
 8003786:	429c      	cmp	r4, r3
 8003788:	d101      	bne.n	800378e <_fflush_r+0x62>
 800378a:	68ac      	ldr	r4, [r5, #8]
 800378c:	e7df      	b.n	800374e <_fflush_r+0x22>
 800378e:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <_fflush_r+0x74>)
 8003790:	429c      	cmp	r4, r3
 8003792:	bf08      	it	eq
 8003794:	68ec      	ldreq	r4, [r5, #12]
 8003796:	e7da      	b.n	800374e <_fflush_r+0x22>
 8003798:	08003d88 	.word	0x08003d88
 800379c:	08003da8 	.word	0x08003da8
 80037a0:	08003d68 	.word	0x08003d68

080037a4 <std>:
 80037a4:	2300      	movs	r3, #0
 80037a6:	b510      	push	{r4, lr}
 80037a8:	4604      	mov	r4, r0
 80037aa:	e9c0 3300 	strd	r3, r3, [r0]
 80037ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037b2:	6083      	str	r3, [r0, #8]
 80037b4:	8181      	strh	r1, [r0, #12]
 80037b6:	6643      	str	r3, [r0, #100]	; 0x64
 80037b8:	81c2      	strh	r2, [r0, #14]
 80037ba:	6183      	str	r3, [r0, #24]
 80037bc:	4619      	mov	r1, r3
 80037be:	2208      	movs	r2, #8
 80037c0:	305c      	adds	r0, #92	; 0x5c
 80037c2:	f7ff fa3d 	bl	8002c40 <memset>
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <std+0x38>)
 80037c8:	6263      	str	r3, [r4, #36]	; 0x24
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <std+0x3c>)
 80037cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80037ce:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <std+0x40>)
 80037d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <std+0x44>)
 80037d4:	6224      	str	r4, [r4, #32]
 80037d6:	6323      	str	r3, [r4, #48]	; 0x30
 80037d8:	bd10      	pop	{r4, pc}
 80037da:	bf00      	nop
 80037dc:	08003afd 	.word	0x08003afd
 80037e0:	08003b1f 	.word	0x08003b1f
 80037e4:	08003b57 	.word	0x08003b57
 80037e8:	08003b7b 	.word	0x08003b7b

080037ec <_cleanup_r>:
 80037ec:	4901      	ldr	r1, [pc, #4]	; (80037f4 <_cleanup_r+0x8>)
 80037ee:	f000 b8af 	b.w	8003950 <_fwalk_reent>
 80037f2:	bf00      	nop
 80037f4:	0800372d 	.word	0x0800372d

080037f8 <__sfmoreglue>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	1e4a      	subs	r2, r1, #1
 80037fc:	2568      	movs	r5, #104	; 0x68
 80037fe:	4355      	muls	r5, r2
 8003800:	460e      	mov	r6, r1
 8003802:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003806:	f7ff faeb 	bl	8002de0 <_malloc_r>
 800380a:	4604      	mov	r4, r0
 800380c:	b140      	cbz	r0, 8003820 <__sfmoreglue+0x28>
 800380e:	2100      	movs	r1, #0
 8003810:	e9c0 1600 	strd	r1, r6, [r0]
 8003814:	300c      	adds	r0, #12
 8003816:	60a0      	str	r0, [r4, #8]
 8003818:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800381c:	f7ff fa10 	bl	8002c40 <memset>
 8003820:	4620      	mov	r0, r4
 8003822:	bd70      	pop	{r4, r5, r6, pc}

08003824 <__sfp_lock_acquire>:
 8003824:	4801      	ldr	r0, [pc, #4]	; (800382c <__sfp_lock_acquire+0x8>)
 8003826:	f000 b8b3 	b.w	8003990 <__retarget_lock_acquire_recursive>
 800382a:	bf00      	nop
 800382c:	20004110 	.word	0x20004110

08003830 <__sfp_lock_release>:
 8003830:	4801      	ldr	r0, [pc, #4]	; (8003838 <__sfp_lock_release+0x8>)
 8003832:	f000 b8ae 	b.w	8003992 <__retarget_lock_release_recursive>
 8003836:	bf00      	nop
 8003838:	20004110 	.word	0x20004110

0800383c <__sinit_lock_acquire>:
 800383c:	4801      	ldr	r0, [pc, #4]	; (8003844 <__sinit_lock_acquire+0x8>)
 800383e:	f000 b8a7 	b.w	8003990 <__retarget_lock_acquire_recursive>
 8003842:	bf00      	nop
 8003844:	2000410b 	.word	0x2000410b

08003848 <__sinit_lock_release>:
 8003848:	4801      	ldr	r0, [pc, #4]	; (8003850 <__sinit_lock_release+0x8>)
 800384a:	f000 b8a2 	b.w	8003992 <__retarget_lock_release_recursive>
 800384e:	bf00      	nop
 8003850:	2000410b 	.word	0x2000410b

08003854 <__sinit>:
 8003854:	b510      	push	{r4, lr}
 8003856:	4604      	mov	r4, r0
 8003858:	f7ff fff0 	bl	800383c <__sinit_lock_acquire>
 800385c:	69a3      	ldr	r3, [r4, #24]
 800385e:	b11b      	cbz	r3, 8003868 <__sinit+0x14>
 8003860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003864:	f7ff bff0 	b.w	8003848 <__sinit_lock_release>
 8003868:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800386c:	6523      	str	r3, [r4, #80]	; 0x50
 800386e:	4b13      	ldr	r3, [pc, #76]	; (80038bc <__sinit+0x68>)
 8003870:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <__sinit+0x6c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	62a2      	str	r2, [r4, #40]	; 0x28
 8003876:	42a3      	cmp	r3, r4
 8003878:	bf04      	itt	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	61a3      	streq	r3, [r4, #24]
 800387e:	4620      	mov	r0, r4
 8003880:	f000 f820 	bl	80038c4 <__sfp>
 8003884:	6060      	str	r0, [r4, #4]
 8003886:	4620      	mov	r0, r4
 8003888:	f000 f81c 	bl	80038c4 <__sfp>
 800388c:	60a0      	str	r0, [r4, #8]
 800388e:	4620      	mov	r0, r4
 8003890:	f000 f818 	bl	80038c4 <__sfp>
 8003894:	2200      	movs	r2, #0
 8003896:	60e0      	str	r0, [r4, #12]
 8003898:	2104      	movs	r1, #4
 800389a:	6860      	ldr	r0, [r4, #4]
 800389c:	f7ff ff82 	bl	80037a4 <std>
 80038a0:	68a0      	ldr	r0, [r4, #8]
 80038a2:	2201      	movs	r2, #1
 80038a4:	2109      	movs	r1, #9
 80038a6:	f7ff ff7d 	bl	80037a4 <std>
 80038aa:	68e0      	ldr	r0, [r4, #12]
 80038ac:	2202      	movs	r2, #2
 80038ae:	2112      	movs	r1, #18
 80038b0:	f7ff ff78 	bl	80037a4 <std>
 80038b4:	2301      	movs	r3, #1
 80038b6:	61a3      	str	r3, [r4, #24]
 80038b8:	e7d2      	b.n	8003860 <__sinit+0xc>
 80038ba:	bf00      	nop
 80038bc:	08003c7c 	.word	0x08003c7c
 80038c0:	080037ed 	.word	0x080037ed

080038c4 <__sfp>:
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c6:	4607      	mov	r7, r0
 80038c8:	f7ff ffac 	bl	8003824 <__sfp_lock_acquire>
 80038cc:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <__sfp+0x84>)
 80038ce:	681e      	ldr	r6, [r3, #0]
 80038d0:	69b3      	ldr	r3, [r6, #24]
 80038d2:	b913      	cbnz	r3, 80038da <__sfp+0x16>
 80038d4:	4630      	mov	r0, r6
 80038d6:	f7ff ffbd 	bl	8003854 <__sinit>
 80038da:	3648      	adds	r6, #72	; 0x48
 80038dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	d503      	bpl.n	80038ec <__sfp+0x28>
 80038e4:	6833      	ldr	r3, [r6, #0]
 80038e6:	b30b      	cbz	r3, 800392c <__sfp+0x68>
 80038e8:	6836      	ldr	r6, [r6, #0]
 80038ea:	e7f7      	b.n	80038dc <__sfp+0x18>
 80038ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038f0:	b9d5      	cbnz	r5, 8003928 <__sfp+0x64>
 80038f2:	4b16      	ldr	r3, [pc, #88]	; (800394c <__sfp+0x88>)
 80038f4:	60e3      	str	r3, [r4, #12]
 80038f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038fa:	6665      	str	r5, [r4, #100]	; 0x64
 80038fc:	f000 f847 	bl	800398e <__retarget_lock_init_recursive>
 8003900:	f7ff ff96 	bl	8003830 <__sfp_lock_release>
 8003904:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003908:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800390c:	6025      	str	r5, [r4, #0]
 800390e:	61a5      	str	r5, [r4, #24]
 8003910:	2208      	movs	r2, #8
 8003912:	4629      	mov	r1, r5
 8003914:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003918:	f7ff f992 	bl	8002c40 <memset>
 800391c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003920:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003924:	4620      	mov	r0, r4
 8003926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003928:	3468      	adds	r4, #104	; 0x68
 800392a:	e7d9      	b.n	80038e0 <__sfp+0x1c>
 800392c:	2104      	movs	r1, #4
 800392e:	4638      	mov	r0, r7
 8003930:	f7ff ff62 	bl	80037f8 <__sfmoreglue>
 8003934:	4604      	mov	r4, r0
 8003936:	6030      	str	r0, [r6, #0]
 8003938:	2800      	cmp	r0, #0
 800393a:	d1d5      	bne.n	80038e8 <__sfp+0x24>
 800393c:	f7ff ff78 	bl	8003830 <__sfp_lock_release>
 8003940:	230c      	movs	r3, #12
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	e7ee      	b.n	8003924 <__sfp+0x60>
 8003946:	bf00      	nop
 8003948:	08003c7c 	.word	0x08003c7c
 800394c:	ffff0001 	.word	0xffff0001

08003950 <_fwalk_reent>:
 8003950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003954:	4606      	mov	r6, r0
 8003956:	4688      	mov	r8, r1
 8003958:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800395c:	2700      	movs	r7, #0
 800395e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003962:	f1b9 0901 	subs.w	r9, r9, #1
 8003966:	d505      	bpl.n	8003974 <_fwalk_reent+0x24>
 8003968:	6824      	ldr	r4, [r4, #0]
 800396a:	2c00      	cmp	r4, #0
 800396c:	d1f7      	bne.n	800395e <_fwalk_reent+0xe>
 800396e:	4638      	mov	r0, r7
 8003970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003974:	89ab      	ldrh	r3, [r5, #12]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d907      	bls.n	800398a <_fwalk_reent+0x3a>
 800397a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800397e:	3301      	adds	r3, #1
 8003980:	d003      	beq.n	800398a <_fwalk_reent+0x3a>
 8003982:	4629      	mov	r1, r5
 8003984:	4630      	mov	r0, r6
 8003986:	47c0      	blx	r8
 8003988:	4307      	orrs	r7, r0
 800398a:	3568      	adds	r5, #104	; 0x68
 800398c:	e7e9      	b.n	8003962 <_fwalk_reent+0x12>

0800398e <__retarget_lock_init_recursive>:
 800398e:	4770      	bx	lr

08003990 <__retarget_lock_acquire_recursive>:
 8003990:	4770      	bx	lr

08003992 <__retarget_lock_release_recursive>:
 8003992:	4770      	bx	lr

08003994 <__swhatbuf_r>:
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	460e      	mov	r6, r1
 8003998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800399c:	2900      	cmp	r1, #0
 800399e:	b096      	sub	sp, #88	; 0x58
 80039a0:	4614      	mov	r4, r2
 80039a2:	461d      	mov	r5, r3
 80039a4:	da07      	bge.n	80039b6 <__swhatbuf_r+0x22>
 80039a6:	2300      	movs	r3, #0
 80039a8:	602b      	str	r3, [r5, #0]
 80039aa:	89b3      	ldrh	r3, [r6, #12]
 80039ac:	061a      	lsls	r2, r3, #24
 80039ae:	d410      	bmi.n	80039d2 <__swhatbuf_r+0x3e>
 80039b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039b4:	e00e      	b.n	80039d4 <__swhatbuf_r+0x40>
 80039b6:	466a      	mov	r2, sp
 80039b8:	f000 f906 	bl	8003bc8 <_fstat_r>
 80039bc:	2800      	cmp	r0, #0
 80039be:	dbf2      	blt.n	80039a6 <__swhatbuf_r+0x12>
 80039c0:	9a01      	ldr	r2, [sp, #4]
 80039c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039ca:	425a      	negs	r2, r3
 80039cc:	415a      	adcs	r2, r3
 80039ce:	602a      	str	r2, [r5, #0]
 80039d0:	e7ee      	b.n	80039b0 <__swhatbuf_r+0x1c>
 80039d2:	2340      	movs	r3, #64	; 0x40
 80039d4:	2000      	movs	r0, #0
 80039d6:	6023      	str	r3, [r4, #0]
 80039d8:	b016      	add	sp, #88	; 0x58
 80039da:	bd70      	pop	{r4, r5, r6, pc}

080039dc <__smakebuf_r>:
 80039dc:	898b      	ldrh	r3, [r1, #12]
 80039de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039e0:	079d      	lsls	r5, r3, #30
 80039e2:	4606      	mov	r6, r0
 80039e4:	460c      	mov	r4, r1
 80039e6:	d507      	bpl.n	80039f8 <__smakebuf_r+0x1c>
 80039e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	6123      	str	r3, [r4, #16]
 80039f0:	2301      	movs	r3, #1
 80039f2:	6163      	str	r3, [r4, #20]
 80039f4:	b002      	add	sp, #8
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
 80039f8:	ab01      	add	r3, sp, #4
 80039fa:	466a      	mov	r2, sp
 80039fc:	f7ff ffca 	bl	8003994 <__swhatbuf_r>
 8003a00:	9900      	ldr	r1, [sp, #0]
 8003a02:	4605      	mov	r5, r0
 8003a04:	4630      	mov	r0, r6
 8003a06:	f7ff f9eb 	bl	8002de0 <_malloc_r>
 8003a0a:	b948      	cbnz	r0, 8003a20 <__smakebuf_r+0x44>
 8003a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a10:	059a      	lsls	r2, r3, #22
 8003a12:	d4ef      	bmi.n	80039f4 <__smakebuf_r+0x18>
 8003a14:	f023 0303 	bic.w	r3, r3, #3
 8003a18:	f043 0302 	orr.w	r3, r3, #2
 8003a1c:	81a3      	strh	r3, [r4, #12]
 8003a1e:	e7e3      	b.n	80039e8 <__smakebuf_r+0xc>
 8003a20:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <__smakebuf_r+0x7c>)
 8003a22:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	6020      	str	r0, [r4, #0]
 8003a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2c:	81a3      	strh	r3, [r4, #12]
 8003a2e:	9b00      	ldr	r3, [sp, #0]
 8003a30:	6163      	str	r3, [r4, #20]
 8003a32:	9b01      	ldr	r3, [sp, #4]
 8003a34:	6120      	str	r0, [r4, #16]
 8003a36:	b15b      	cbz	r3, 8003a50 <__smakebuf_r+0x74>
 8003a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	f000 f8d5 	bl	8003bec <_isatty_r>
 8003a42:	b128      	cbz	r0, 8003a50 <__smakebuf_r+0x74>
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	f023 0303 	bic.w	r3, r3, #3
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	81a3      	strh	r3, [r4, #12]
 8003a50:	89a0      	ldrh	r0, [r4, #12]
 8003a52:	4305      	orrs	r5, r0
 8003a54:	81a5      	strh	r5, [r4, #12]
 8003a56:	e7cd      	b.n	80039f4 <__smakebuf_r+0x18>
 8003a58:	080037ed 	.word	0x080037ed

08003a5c <__malloc_lock>:
 8003a5c:	4801      	ldr	r0, [pc, #4]	; (8003a64 <__malloc_lock+0x8>)
 8003a5e:	f7ff bf97 	b.w	8003990 <__retarget_lock_acquire_recursive>
 8003a62:	bf00      	nop
 8003a64:	2000410c 	.word	0x2000410c

08003a68 <__malloc_unlock>:
 8003a68:	4801      	ldr	r0, [pc, #4]	; (8003a70 <__malloc_unlock+0x8>)
 8003a6a:	f7ff bf92 	b.w	8003992 <__retarget_lock_release_recursive>
 8003a6e:	bf00      	nop
 8003a70:	2000410c 	.word	0x2000410c

08003a74 <_raise_r>:
 8003a74:	291f      	cmp	r1, #31
 8003a76:	b538      	push	{r3, r4, r5, lr}
 8003a78:	4604      	mov	r4, r0
 8003a7a:	460d      	mov	r5, r1
 8003a7c:	d904      	bls.n	8003a88 <_raise_r+0x14>
 8003a7e:	2316      	movs	r3, #22
 8003a80:	6003      	str	r3, [r0, #0]
 8003a82:	f04f 30ff 	mov.w	r0, #4294967295
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
 8003a88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003a8a:	b112      	cbz	r2, 8003a92 <_raise_r+0x1e>
 8003a8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003a90:	b94b      	cbnz	r3, 8003aa6 <_raise_r+0x32>
 8003a92:	4620      	mov	r0, r4
 8003a94:	f000 f830 	bl	8003af8 <_getpid_r>
 8003a98:	462a      	mov	r2, r5
 8003a9a:	4601      	mov	r1, r0
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aa2:	f000 b817 	b.w	8003ad4 <_kill_r>
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d00a      	beq.n	8003ac0 <_raise_r+0x4c>
 8003aaa:	1c59      	adds	r1, r3, #1
 8003aac:	d103      	bne.n	8003ab6 <_raise_r+0x42>
 8003aae:	2316      	movs	r3, #22
 8003ab0:	6003      	str	r3, [r0, #0]
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	e7e7      	b.n	8003a86 <_raise_r+0x12>
 8003ab6:	2400      	movs	r4, #0
 8003ab8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003abc:	4628      	mov	r0, r5
 8003abe:	4798      	blx	r3
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	e7e0      	b.n	8003a86 <_raise_r+0x12>

08003ac4 <raise>:
 8003ac4:	4b02      	ldr	r3, [pc, #8]	; (8003ad0 <raise+0xc>)
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	f7ff bfd3 	b.w	8003a74 <_raise_r>
 8003ace:	bf00      	nop
 8003ad0:	20002010 	.word	0x20002010

08003ad4 <_kill_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	4d07      	ldr	r5, [pc, #28]	; (8003af4 <_kill_r+0x20>)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	4604      	mov	r4, r0
 8003adc:	4608      	mov	r0, r1
 8003ade:	4611      	mov	r1, r2
 8003ae0:	602b      	str	r3, [r5, #0]
 8003ae2:	f7fc fe8d 	bl	8000800 <_kill>
 8003ae6:	1c43      	adds	r3, r0, #1
 8003ae8:	d102      	bne.n	8003af0 <_kill_r+0x1c>
 8003aea:	682b      	ldr	r3, [r5, #0]
 8003aec:	b103      	cbz	r3, 8003af0 <_kill_r+0x1c>
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	bd38      	pop	{r3, r4, r5, pc}
 8003af2:	bf00      	nop
 8003af4:	20004114 	.word	0x20004114

08003af8 <_getpid_r>:
 8003af8:	f7fc be7a 	b.w	80007f0 <_getpid>

08003afc <__sread>:
 8003afc:	b510      	push	{r4, lr}
 8003afe:	460c      	mov	r4, r1
 8003b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b04:	f000 f894 	bl	8003c30 <_read_r>
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	bfab      	itete	ge
 8003b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8003b10:	181b      	addge	r3, r3, r0
 8003b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b16:	bfac      	ite	ge
 8003b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b1a:	81a3      	strhlt	r3, [r4, #12]
 8003b1c:	bd10      	pop	{r4, pc}

08003b1e <__swrite>:
 8003b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b22:	461f      	mov	r7, r3
 8003b24:	898b      	ldrh	r3, [r1, #12]
 8003b26:	05db      	lsls	r3, r3, #23
 8003b28:	4605      	mov	r5, r0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	4616      	mov	r6, r2
 8003b2e:	d505      	bpl.n	8003b3c <__swrite+0x1e>
 8003b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b34:	2302      	movs	r3, #2
 8003b36:	2200      	movs	r2, #0
 8003b38:	f000 f868 	bl	8003c0c <_lseek_r>
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b46:	81a3      	strh	r3, [r4, #12]
 8003b48:	4632      	mov	r2, r6
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b52:	f000 b817 	b.w	8003b84 <_write_r>

08003b56 <__sseek>:
 8003b56:	b510      	push	{r4, lr}
 8003b58:	460c      	mov	r4, r1
 8003b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b5e:	f000 f855 	bl	8003c0c <_lseek_r>
 8003b62:	1c43      	adds	r3, r0, #1
 8003b64:	89a3      	ldrh	r3, [r4, #12]
 8003b66:	bf15      	itete	ne
 8003b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b72:	81a3      	strheq	r3, [r4, #12]
 8003b74:	bf18      	it	ne
 8003b76:	81a3      	strhne	r3, [r4, #12]
 8003b78:	bd10      	pop	{r4, pc}

08003b7a <__sclose>:
 8003b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b7e:	f000 b813 	b.w	8003ba8 <_close_r>
	...

08003b84 <_write_r>:
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	4d07      	ldr	r5, [pc, #28]	; (8003ba4 <_write_r+0x20>)
 8003b88:	4604      	mov	r4, r0
 8003b8a:	4608      	mov	r0, r1
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	2200      	movs	r2, #0
 8003b90:	602a      	str	r2, [r5, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	f7fc fe6b 	bl	800086e <_write>
 8003b98:	1c43      	adds	r3, r0, #1
 8003b9a:	d102      	bne.n	8003ba2 <_write_r+0x1e>
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	b103      	cbz	r3, 8003ba2 <_write_r+0x1e>
 8003ba0:	6023      	str	r3, [r4, #0]
 8003ba2:	bd38      	pop	{r3, r4, r5, pc}
 8003ba4:	20004114 	.word	0x20004114

08003ba8 <_close_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4d06      	ldr	r5, [pc, #24]	; (8003bc4 <_close_r+0x1c>)
 8003bac:	2300      	movs	r3, #0
 8003bae:	4604      	mov	r4, r0
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	602b      	str	r3, [r5, #0]
 8003bb4:	f7fc fe77 	bl	80008a6 <_close>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d102      	bne.n	8003bc2 <_close_r+0x1a>
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	b103      	cbz	r3, 8003bc2 <_close_r+0x1a>
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}
 8003bc4:	20004114 	.word	0x20004114

08003bc8 <_fstat_r>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4d07      	ldr	r5, [pc, #28]	; (8003be8 <_fstat_r+0x20>)
 8003bcc:	2300      	movs	r3, #0
 8003bce:	4604      	mov	r4, r0
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	602b      	str	r3, [r5, #0]
 8003bd6:	f7fc fe72 	bl	80008be <_fstat>
 8003bda:	1c43      	adds	r3, r0, #1
 8003bdc:	d102      	bne.n	8003be4 <_fstat_r+0x1c>
 8003bde:	682b      	ldr	r3, [r5, #0]
 8003be0:	b103      	cbz	r3, 8003be4 <_fstat_r+0x1c>
 8003be2:	6023      	str	r3, [r4, #0]
 8003be4:	bd38      	pop	{r3, r4, r5, pc}
 8003be6:	bf00      	nop
 8003be8:	20004114 	.word	0x20004114

08003bec <_isatty_r>:
 8003bec:	b538      	push	{r3, r4, r5, lr}
 8003bee:	4d06      	ldr	r5, [pc, #24]	; (8003c08 <_isatty_r+0x1c>)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	602b      	str	r3, [r5, #0]
 8003bf8:	f7fc fe71 	bl	80008de <_isatty>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	d102      	bne.n	8003c06 <_isatty_r+0x1a>
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	b103      	cbz	r3, 8003c06 <_isatty_r+0x1a>
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	bd38      	pop	{r3, r4, r5, pc}
 8003c08:	20004114 	.word	0x20004114

08003c0c <_lseek_r>:
 8003c0c:	b538      	push	{r3, r4, r5, lr}
 8003c0e:	4d07      	ldr	r5, [pc, #28]	; (8003c2c <_lseek_r+0x20>)
 8003c10:	4604      	mov	r4, r0
 8003c12:	4608      	mov	r0, r1
 8003c14:	4611      	mov	r1, r2
 8003c16:	2200      	movs	r2, #0
 8003c18:	602a      	str	r2, [r5, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f7fc fe6a 	bl	80008f4 <_lseek>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d102      	bne.n	8003c2a <_lseek_r+0x1e>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	b103      	cbz	r3, 8003c2a <_lseek_r+0x1e>
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
 8003c2c:	20004114 	.word	0x20004114

08003c30 <_read_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4d07      	ldr	r5, [pc, #28]	; (8003c50 <_read_r+0x20>)
 8003c34:	4604      	mov	r4, r0
 8003c36:	4608      	mov	r0, r1
 8003c38:	4611      	mov	r1, r2
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	602a      	str	r2, [r5, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f7fc fdf8 	bl	8000834 <_read>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d102      	bne.n	8003c4e <_read_r+0x1e>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	b103      	cbz	r3, 8003c4e <_read_r+0x1e>
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
 8003c50:	20004114 	.word	0x20004114

08003c54 <_init>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	bf00      	nop
 8003c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	469e      	mov	lr, r3
 8003c5e:	4770      	bx	lr

08003c60 <_fini>:
 8003c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c62:	bf00      	nop
 8003c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c66:	bc08      	pop	{r3}
 8003c68:	469e      	mov	lr, r3
 8003c6a:	4770      	bx	lr
